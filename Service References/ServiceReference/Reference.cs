//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tabidus.POC.GUI.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IPOCService")]
    public interface IPOCService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/SearchEndPoint", ReplyAction="http://tempuri.org/IEndpointService/SearchEndPointResponse")]
        string SearchEndPoint(string encryptedSearchKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/SearchEndPoint", ReplyAction="http://tempuri.org/IEndpointService/SearchEndPointResponse")]
        System.Threading.Tasks.Task<string> SearchEndPointAsync(string encryptedSearchKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetPagingData", ReplyAction="http://tempuri.org/IEndpointService/GetPagingDataResponse")]
        string GetPagingData(string pagingBase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetPagingData", ReplyAction="http://tempuri.org/IEndpointService/GetPagingDataResponse")]
        System.Threading.Tasks.Task<string> GetPagingDataAsync(string pagingBase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/SaveNewFolder", ReplyAction="http://tempuri.org/IEndpointService/SaveNewFolderResponse")]
        string SaveNewFolder(string folderData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/SaveNewFolder", ReplyAction="http://tempuri.org/IEndpointService/SaveNewFolderResponse")]
        System.Threading.Tasks.Task<string> SaveNewFolderAsync(string folderData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/SaveDirectoryEndpoint", ReplyAction="http://tempuri.org/IEndpointService/SaveDirectoryEndpointResponse")]
        string SaveDirectoryEndpoint(string endPointData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/SaveDirectoryEndpoint", ReplyAction="http://tempuri.org/IEndpointService/SaveDirectoryEndpointResponse")]
        System.Threading.Tasks.Task<string> SaveDirectoryEndpointAsync(string endPointData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetEndpoint", ReplyAction="http://tempuri.org/IEndpointService/GetEndpointResponse")]
        string GetEndpoint(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetEndpoint", ReplyAction="http://tempuri.org/IEndpointService/GetEndpointResponse")]
        System.Threading.Tasks.Task<string> GetEndpointAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetEndPointForLabel", ReplyAction="http://tempuri.org/IEndpointService/GetEndPointForLabelResponse")]
        string GetEndPointForLabel(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetEndPointForLabel", ReplyAction="http://tempuri.org/IEndpointService/GetEndPointForLabelResponse")]
        System.Threading.Tasks.Task<string> GetEndPointForLabelAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetDirectoryEndpointColor", ReplyAction="http://tempuri.org/IEndpointService/GetDirectoryEndpointColorResponse")]
        string GetDirectoryEndpointColor(string directoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetDirectoryEndpointColor", ReplyAction="http://tempuri.org/IEndpointService/GetDirectoryEndpointColorResponse")]
        System.Threading.Tasks.Task<string> GetDirectoryEndpointColorAsync(string directoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/SearchEndPointForLabel", ReplyAction="http://tempuri.org/IEndpointService/SearchEndPointForLabelResponse")]
        string SearchEndPointForLabel(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/SearchEndPointForLabel", ReplyAction="http://tempuri.org/IEndpointService/SearchEndPointForLabelResponse")]
        System.Threading.Tasks.Task<string> SearchEndPointForLabelAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetAllFolders", ReplyAction="http://tempuri.org/IEndpointService/GetAllFoldersResponse")]
        string GetAllFolders(string authText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetAllFolders", ReplyAction="http://tempuri.org/IEndpointService/GetAllFoldersResponse")]
        System.Threading.Tasks.Task<string> GetAllFoldersAsync(string authText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetDirectoryData", ReplyAction="http://tempuri.org/IEndpointService/GetDirectoryDataResponse")]
        string GetDirectoryData(string directoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetDirectoryData", ReplyAction="http://tempuri.org/IEndpointService/GetDirectoryDataResponse")]
        System.Threading.Tasks.Task<string> GetDirectoryDataAsync(string directoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/EditFolder", ReplyAction="http://tempuri.org/IEndpointService/EditFolderResponse")]
        void EditFolder(string folderData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/EditFolder", ReplyAction="http://tempuri.org/IEndpointService/EditFolderResponse")]
        System.Threading.Tasks.Task EditFolderAsync(string folderData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/EditEndpoint", ReplyAction="http://tempuri.org/IEndpointService/EditEndpointResponse")]
        void EditEndpoint(string endpointData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/EditEndpoint", ReplyAction="http://tempuri.org/IEndpointService/EditEndpointResponse")]
        System.Threading.Tasks.Task EditEndpointAsync(string endpointData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/MoveFoldersAndEndpoints", ReplyAction="http://tempuri.org/IEndpointService/MoveFoldersAndEndpointsResponse")]
        void MoveFoldersAndEndpoints(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/MoveFoldersAndEndpoints", ReplyAction="http://tempuri.org/IEndpointService/MoveFoldersAndEndpointsResponse")]
        System.Threading.Tasks.Task MoveFoldersAndEndpointsAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/UpdateColumnColor", ReplyAction="http://tempuri.org/IEndpointService/UpdateColumnColorResponse")]
        string UpdateColumnColor(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/UpdateColumnColor", ReplyAction="http://tempuri.org/IEndpointService/UpdateColumnColorResponse")]
        System.Threading.Tasks.Task<string> UpdateColumnColorAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/UpdateColorByParent", ReplyAction="http://tempuri.org/IEndpointService/UpdateColorByParentResponse")]
        string UpdateColorByParent(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/UpdateColorByParent", ReplyAction="http://tempuri.org/IEndpointService/UpdateColorByParentResponse")]
        System.Threading.Tasks.Task<string> UpdateColorByParentAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/ImportFolderComputer", ReplyAction="http://tempuri.org/IEndpointService/ImportFolderComputerResponse")]
        string ImportFolderComputer(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/ImportFolderComputer", ReplyAction="http://tempuri.org/IEndpointService/ImportFolderComputerResponse")]
        System.Threading.Tasks.Task<string> ImportFolderComputerAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetAllDirectoryComputer", ReplyAction="http://tempuri.org/IEndpointService/GetAllDirectoryComputerResponse")]
        string GetAllDirectoryComputer(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetAllDirectoryComputer", ReplyAction="http://tempuri.org/IEndpointService/GetAllDirectoryComputerResponse")]
        System.Threading.Tasks.Task<string> GetAllDirectoryComputerAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetColorModels", ReplyAction="http://tempuri.org/IEndpointService/GetColorModelsResponse")]
        string GetColorModels(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetColorModels", ReplyAction="http://tempuri.org/IEndpointService/GetColorModelsResponse")]
        System.Threading.Tasks.Task<string> GetColorModelsAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/DeleteDirectoryComputer", ReplyAction="http://tempuri.org/IEndpointService/DeleteDirectoryComputerResponse")]
        string DeleteDirectoryComputer(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/DeleteDirectoryComputer", ReplyAction="http://tempuri.org/IEndpointService/DeleteDirectoryComputerResponse")]
        System.Threading.Tasks.Task<string> DeleteDirectoryComputerAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetAllLabel", ReplyAction="http://tempuri.org/IEndpointService/GetAllLabelResponse")]
        string GetAllLabel(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetAllLabel", ReplyAction="http://tempuri.org/IEndpointService/GetAllLabelResponse")]
        System.Threading.Tasks.Task<string> GetAllLabelAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/AddLabel", ReplyAction="http://tempuri.org/IEndpointService/AddLabelResponse")]
        string AddLabel(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/AddLabel", ReplyAction="http://tempuri.org/IEndpointService/AddLabelResponse")]
        System.Threading.Tasks.Task<string> AddLabelAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/EditLabelCriteria", ReplyAction="http://tempuri.org/IEndpointService/EditLabelCriteriaResponse")]
        void EditLabelCriteria(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/EditLabelCriteria", ReplyAction="http://tempuri.org/IEndpointService/EditLabelCriteriaResponse")]
        System.Threading.Tasks.Task EditLabelCriteriaAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/AddLabelCriteria", ReplyAction="http://tempuri.org/IEndpointService/AddLabelCriteriaResponse")]
        string AddLabelCriteria(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/AddLabelCriteria", ReplyAction="http://tempuri.org/IEndpointService/AddLabelCriteriaResponse")]
        System.Threading.Tasks.Task<string> AddLabelCriteriaAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/DeleteLabelCriteria", ReplyAction="http://tempuri.org/IEndpointService/DeleteLabelCriteriaResponse")]
        void DeleteLabelCriteria(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/DeleteLabelCriteria", ReplyAction="http://tempuri.org/IEndpointService/DeleteLabelCriteriaResponse")]
        System.Threading.Tasks.Task DeleteLabelCriteriaAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/DeleteLabel", ReplyAction="http://tempuri.org/IEndpointService/DeleteLabelResponse")]
        string DeleteLabel(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/DeleteLabel", ReplyAction="http://tempuri.org/IEndpointService/DeleteLabelResponse")]
        System.Threading.Tasks.Task<string> DeleteLabelAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/ResetLabel", ReplyAction="http://tempuri.org/IEndpointService/ResetLabelResponse")]
        string ResetLabel(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/ResetLabel", ReplyAction="http://tempuri.org/IEndpointService/ResetLabelResponse")]
        System.Threading.Tasks.Task<string> ResetLabelAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/EditLabel", ReplyAction="http://tempuri.org/IEndpointService/EditLabelResponse")]
        string EditLabel(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/EditLabel", ReplyAction="http://tempuri.org/IEndpointService/EditLabelResponse")]
        System.Threading.Tasks.Task<string> EditLabelAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetLabelParameters", ReplyAction="http://tempuri.org/IEndpointService/GetLabelParametersResponse")]
        string[] GetLabelParameters(Tabidus.POC.Common.Constants.LabelParameters parameterType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetLabelParameters", ReplyAction="http://tempuri.org/IEndpointService/GetLabelParametersResponse")]
        System.Threading.Tasks.Task<string[]> GetLabelParametersAsync(Tabidus.POC.Common.Constants.LabelParameters parameterType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/CanRefresh", ReplyAction="http://tempuri.org/IEndpointService/CanRefreshResponse")]
        bool CanRefresh(System.DateTime lastRefresh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/CanRefresh", ReplyAction="http://tempuri.org/IEndpointService/CanRefreshResponse")]
        System.Threading.Tasks.Task<bool> CanRefreshAsync(System.DateTime lastRefresh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetLastUpdateData", ReplyAction="http://tempuri.org/IEndpointService/GetLastUpdateDataResponse")]
        string GetLastUpdateData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetLastUpdateData", ReplyAction="http://tempuri.org/IEndpointService/GetLastUpdateDataResponse")]
        System.Threading.Tasks.Task<string> GetLastUpdateDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/CanRefreshEndpoint", ReplyAction="http://tempuri.org/IEndpointService/CanRefreshEndpointResponse")]
        bool CanRefreshEndpoint(System.DateTime lastRefresh, int endpointId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/CanRefreshEndpoint", ReplyAction="http://tempuri.org/IEndpointService/CanRefreshEndpointResponse")]
        System.Threading.Tasks.Task<bool> CanRefreshEndpointAsync(System.DateTime lastRefresh, int endpointId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/AddFolderComputerFromLDAP", ReplyAction="http://tempuri.org/IEndpointService/AddFolderComputerFromLDAPResponse")]
        string AddFolderComputerFromLDAP(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/AddFolderComputerFromLDAP", ReplyAction="http://tempuri.org/IEndpointService/AddFolderComputerFromLDAPResponse")]
        System.Threading.Tasks.Task<string> AddFolderComputerFromLDAPAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetAssignmentLastUpdateData", ReplyAction="http://tempuri.org/IEndpointService/GetAssignmentLastUpdateDataResponse")]
        string GetAssignmentLastUpdateData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetAssignmentLastUpdateData", ReplyAction="http://tempuri.org/IEndpointService/GetAssignmentLastUpdateDataResponse")]
        System.Threading.Tasks.Task<string> GetAssignmentLastUpdateDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetAllNeighborhoodWatch", ReplyAction="http://tempuri.org/IDiscoveryService/GetAllNeighborhoodWatchResponse")]
        string GetAllNeighborhoodWatch(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetAllNeighborhoodWatch", ReplyAction="http://tempuri.org/IDiscoveryService/GetAllNeighborhoodWatchResponse")]
        System.Threading.Tasks.Task<string> GetAllNeighborhoodWatchAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetAllNetworks", ReplyAction="http://tempuri.org/IDiscoveryService/GetAllNetworksResponse")]
        string GetAllNetworks(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetAllNetworks", ReplyAction="http://tempuri.org/IDiscoveryService/GetAllNetworksResponse")]
        System.Threading.Tasks.Task<string> GetAllNetworksAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDiscoveryService/SaveDiscoveries")]
        void SaveDiscoveries(string stringData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDiscoveryService/SaveDiscoveries")]
        System.Threading.Tasks.Task SaveDiscoveriesAsync(string stringData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/SaveNeighborhoodWatchConfirmed", ReplyAction="http://tempuri.org/IDiscoveryService/SaveNeighborhoodWatchConfirmedResponse")]
        void SaveNeighborhoodWatchConfirmed(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/SaveNeighborhoodWatchConfirmed", ReplyAction="http://tempuri.org/IDiscoveryService/SaveNeighborhoodWatchConfirmedResponse")]
        System.Threading.Tasks.Task SaveNeighborhoodWatchConfirmedAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/AddNewEndpointsFromDiscovery", ReplyAction="http://tempuri.org/IDiscoveryService/AddNewEndpointsFromDiscoveryResponse")]
        string AddNewEndpointsFromDiscovery(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/AddNewEndpointsFromDiscovery", ReplyAction="http://tempuri.org/IDiscoveryService/AddNewEndpointsFromDiscoveryResponse")]
        System.Threading.Tasks.Task<string> AddNewEndpointsFromDiscoveryAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/DeleteNeighborhoodWatch", ReplyAction="http://tempuri.org/IDiscoveryService/DeleteNeighborhoodWatchResponse")]
        void DeleteNeighborhoodWatch(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/DeleteNeighborhoodWatch", ReplyAction="http://tempuri.org/IDiscoveryService/DeleteNeighborhoodWatchResponse")]
        System.Threading.Tasks.Task DeleteNeighborhoodWatchAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetLDAPBYDomain", ReplyAction="http://tempuri.org/IDiscoveryService/GetLDAPBYDomainResponse")]
        string GetLDAPBYDomain(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetLDAPBYDomain", ReplyAction="http://tempuri.org/IDiscoveryService/GetLDAPBYDomainResponse")]
        System.Threading.Tasks.Task<string> GetLDAPBYDomainAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetAllLDAP", ReplyAction="http://tempuri.org/IDiscoveryService/GetAllLDAPResponse")]
        string GetAllLDAP(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetAllLDAP", ReplyAction="http://tempuri.org/IDiscoveryService/GetAllLDAPResponse")]
        System.Threading.Tasks.Task<string> GetAllLDAPAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/AddNewLDAP", ReplyAction="http://tempuri.org/IDiscoveryService/AddNewLDAPResponse")]
        string AddNewLDAP(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/AddNewLDAP", ReplyAction="http://tempuri.org/IDiscoveryService/AddNewLDAPResponse")]
        System.Threading.Tasks.Task<string> AddNewLDAPAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/DeleteLDAP", ReplyAction="http://tempuri.org/IDiscoveryService/DeleteLDAPResponse")]
        void DeleteLDAP(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/DeleteLDAP", ReplyAction="http://tempuri.org/IDiscoveryService/DeleteLDAPResponse")]
        System.Threading.Tasks.Task DeleteLDAPAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetAllLDAPDirectoryEndpoint", ReplyAction="http://tempuri.org/IDiscoveryService/GetAllLDAPDirectoryEndpointResponse")]
        string GetAllLDAPDirectoryEndpoint(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetAllLDAPDirectoryEndpoint", ReplyAction="http://tempuri.org/IDiscoveryService/GetAllLDAPDirectoryEndpointResponse")]
        System.Threading.Tasks.Task<string> GetAllLDAPDirectoryEndpointAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetLDAPByDistinguishedName", ReplyAction="http://tempuri.org/IDiscoveryService/GetLDAPByDistinguishedNameResponse")]
        string GetLDAPByDistinguishedName(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetLDAPByDistinguishedName", ReplyAction="http://tempuri.org/IDiscoveryService/GetLDAPByDistinguishedNameResponse")]
        System.Threading.Tasks.Task<string> GetLDAPByDistinguishedNameAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetAllLDAPDirectoryEndpointByDomain", ReplyAction="http://tempuri.org/IDiscoveryService/GetAllLDAPDirectoryEndpointByDomainResponse")]
        string GetAllLDAPDirectoryEndpointByDomain(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetAllLDAPDirectoryEndpointByDomain", ReplyAction="http://tempuri.org/IDiscoveryService/GetAllLDAPDirectoryEndpointByDomainResponse")]
        System.Threading.Tasks.Task<string> GetAllLDAPDirectoryEndpointByDomainAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetLDAPLv1", ReplyAction="http://tempuri.org/IDiscoveryService/GetLDAPLv1Response")]
        string GetLDAPLv1(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscoveryService/GetLDAPLv1", ReplyAction="http://tempuri.org/IDiscoveryService/GetLDAPLv1Response")]
        System.Threading.Tasks.Task<string> GetLDAPLv1Async(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/GetRules", ReplyAction="http://tempuri.org/IAssignmentService/GetRulesResponse")]
        string GetRules(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/GetRules", ReplyAction="http://tempuri.org/IAssignmentService/GetRulesResponse")]
        System.Threading.Tasks.Task<string> GetRulesAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/AddRule", ReplyAction="http://tempuri.org/IAssignmentService/AddRuleResponse")]
        string AddRule(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/AddRule", ReplyAction="http://tempuri.org/IAssignmentService/AddRuleResponse")]
        System.Threading.Tasks.Task<string> AddRuleAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/EditRule", ReplyAction="http://tempuri.org/IAssignmentService/EditRuleResponse")]
        string EditRule(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/EditRule", ReplyAction="http://tempuri.org/IAssignmentService/EditRuleResponse")]
        System.Threading.Tasks.Task<string> EditRuleAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/DeleteRule", ReplyAction="http://tempuri.org/IAssignmentService/DeleteRuleResponse")]
        string DeleteRule(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/DeleteRule", ReplyAction="http://tempuri.org/IAssignmentService/DeleteRuleResponse")]
        System.Threading.Tasks.Task<string> DeleteRuleAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/AddAssignmentRuleCriteria", ReplyAction="http://tempuri.org/IAssignmentService/AddAssignmentRuleCriteriaResponse")]
        string AddAssignmentRuleCriteria(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/AddAssignmentRuleCriteria", ReplyAction="http://tempuri.org/IAssignmentService/AddAssignmentRuleCriteriaResponse")]
        System.Threading.Tasks.Task<string> AddAssignmentRuleCriteriaAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/EditAssignmentRuleCriteria", ReplyAction="http://tempuri.org/IAssignmentService/EditAssignmentRuleCriteriaResponse")]
        string EditAssignmentRuleCriteria(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/EditAssignmentRuleCriteria", ReplyAction="http://tempuri.org/IAssignmentService/EditAssignmentRuleCriteriaResponse")]
        System.Threading.Tasks.Task<string> EditAssignmentRuleCriteriaAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/DeleteAssignRuleCriteria", ReplyAction="http://tempuri.org/IAssignmentService/DeleteAssignRuleCriteriaResponse")]
        string DeleteAssignRuleCriteria(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/DeleteAssignRuleCriteria", ReplyAction="http://tempuri.org/IAssignmentService/DeleteAssignRuleCriteriaResponse")]
        System.Threading.Tasks.Task<string> DeleteAssignRuleCriteriaAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/SaveRule", ReplyAction="http://tempuri.org/IAssignmentService/SaveRuleResponse")]
        string SaveRule(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/SaveRule", ReplyAction="http://tempuri.org/IAssignmentService/SaveRuleResponse")]
        System.Threading.Tasks.Task<string> SaveRuleAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/GetActivedRuleByDirectoryId", ReplyAction="http://tempuri.org/IAssignmentService/GetActivedRuleByDirectoryIdResponse")]
        string GetActivedRuleByDirectoryId(string dataRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAssignmentService/GetActivedRuleByDirectoryId", ReplyAction="http://tempuri.org/IAssignmentService/GetActivedRuleByDirectoryIdResponse")]
        System.Threading.Tasks.Task<string> GetActivedRuleByDirectoryIdAsync(string dataRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileRepositoryService/GetFile", ReplyAction="http://tempuri.org/IFileRepositoryService/GetFileResponse")]
        System.IO.Stream GetFile(string virtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileRepositoryService/GetFile", ReplyAction="http://tempuri.org/IFileRepositoryService/GetFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetFileAsync(string virtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileRepositoryService/GetFileVersion", ReplyAction="http://tempuri.org/IFileRepositoryService/GetFileVersionResponse")]
        string GetFileVersion(string virtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileRepositoryService/GetFileVersion", ReplyAction="http://tempuri.org/IFileRepositoryService/GetFileVersionResponse")]
        System.Threading.Tasks.Task<string> GetFileVersionAsync(string virtualPath);
        
        // CODEGEN: Generating message contract since the operation UploadFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileRepositoryService/UploadFile", ReplyAction="http://tempuri.org/IFileRepositoryService/UploadFileResponse")]
        Tabidus.POC.GUI.ServiceReference.UploadFileResponse UploadFile(Tabidus.POC.GUI.ServiceReference.FileUploadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileRepositoryService/UploadFile", ReplyAction="http://tempuri.org/IFileRepositoryService/UploadFileResponse")]
        System.Threading.Tasks.Task<Tabidus.POC.GUI.ServiceReference.UploadFileResponse> UploadFileAsync(Tabidus.POC.GUI.ServiceReference.FileUploadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileRepositoryService/DeleteSoftwareFiles", ReplyAction="http://tempuri.org/IFileRepositoryService/DeleteSoftwareFilesResponse")]
        string DeleteSoftwareFiles(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileRepositoryService/DeleteSoftwareFiles", ReplyAction="http://tempuri.org/IFileRepositoryService/DeleteSoftwareFilesResponse")]
        System.Threading.Tasks.Task<string> DeleteSoftwareFilesAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISoftwareService/SyncNow")]
        void SyncNow(string request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISoftwareService/SyncNow")]
        System.Threading.Tasks.Task SyncNowAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/TransferToServerAgent", ReplyAction="http://tempuri.org/ISoftwareService/TransferToServerAgentResponse")]
        string TransferToServerAgent(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/TransferToServerAgent", ReplyAction="http://tempuri.org/ISoftwareService/TransferToServerAgentResponse")]
        System.Threading.Tasks.Task<string> TransferToServerAgentAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/NewSoftwareTransfer", ReplyAction="http://tempuri.org/ISoftwareService/NewSoftwareTransferResponse")]
        string NewSoftwareTransfer(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/NewSoftwareTransfer", ReplyAction="http://tempuri.org/ISoftwareService/NewSoftwareTransferResponse")]
        System.Threading.Tasks.Task<string> NewSoftwareTransferAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetTransferStatus", ReplyAction="http://tempuri.org/ISoftwareService/GetTransferStatusResponse")]
        string GetTransferStatus(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetTransferStatus", ReplyAction="http://tempuri.org/ISoftwareService/GetTransferStatusResponse")]
        System.Threading.Tasks.Task<string> GetTransferStatusAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetAllUpdateSource", ReplyAction="http://tempuri.org/ISoftwareService/GetAllUpdateSourceResponse")]
        string GetAllUpdateSource(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetAllUpdateSource", ReplyAction="http://tempuri.org/ISoftwareService/GetAllUpdateSourceResponse")]
        System.Threading.Tasks.Task<string> GetAllUpdateSourceAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetAllUpdateSourceSoftware", ReplyAction="http://tempuri.org/ISoftwareService/GetAllUpdateSourceSoftwareResponse")]
        string GetAllUpdateSourceSoftware(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetAllUpdateSourceSoftware", ReplyAction="http://tempuri.org/ISoftwareService/GetAllUpdateSourceSoftwareResponse")]
        System.Threading.Tasks.Task<string> GetAllUpdateSourceSoftwareAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/EditUpdateSource", ReplyAction="http://tempuri.org/ISoftwareService/EditUpdateSourceResponse")]
        void EditUpdateSource(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/EditUpdateSource", ReplyAction="http://tempuri.org/ISoftwareService/EditUpdateSourceResponse")]
        System.Threading.Tasks.Task EditUpdateSourceAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/AddContent", ReplyAction="http://tempuri.org/ISoftwareService/AddContentResponse")]
        string AddContent(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/AddContent", ReplyAction="http://tempuri.org/ISoftwareService/AddContentResponse")]
        System.Threading.Tasks.Task<string> AddContentAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/EditContent", ReplyAction="http://tempuri.org/ISoftwareService/EditContentResponse")]
        void EditContent(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/EditContent", ReplyAction="http://tempuri.org/ISoftwareService/EditContentResponse")]
        System.Threading.Tasks.Task EditContentAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetAllSoftware", ReplyAction="http://tempuri.org/ISoftwareService/GetAllSoftwareResponse")]
        string GetAllSoftware(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetAllSoftware", ReplyAction="http://tempuri.org/ISoftwareService/GetAllSoftwareResponse")]
        System.Threading.Tasks.Task<string> GetAllSoftwareAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/DeleteContent", ReplyAction="http://tempuri.org/ISoftwareService/DeleteContentResponse")]
        void DeleteContent(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/DeleteContent", ReplyAction="http://tempuri.org/ISoftwareService/DeleteContentResponse")]
        System.Threading.Tasks.Task DeleteContentAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/SoftwareInsertOrUpdate", ReplyAction="http://tempuri.org/ISoftwareService/SoftwareInsertOrUpdateResponse")]
        string SoftwareInsertOrUpdate(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/SoftwareInsertOrUpdate", ReplyAction="http://tempuri.org/ISoftwareService/SoftwareInsertOrUpdateResponse")]
        System.Threading.Tasks.Task<string> SoftwareInsertOrUpdateAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetTransferScheduling", ReplyAction="http://tempuri.org/ISoftwareService/GetTransferSchedulingResponse")]
        string GetTransferScheduling(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetTransferScheduling", ReplyAction="http://tempuri.org/ISoftwareService/GetTransferSchedulingResponse")]
        System.Threading.Tasks.Task<string> GetTransferSchedulingAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetAllUpdateSourceScheduling", ReplyAction="http://tempuri.org/ISoftwareService/GetAllUpdateSourceSchedulingResponse")]
        string GetAllUpdateSourceScheduling(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetAllUpdateSourceScheduling", ReplyAction="http://tempuri.org/ISoftwareService/GetAllUpdateSourceSchedulingResponse")]
        System.Threading.Tasks.Task<string> GetAllUpdateSourceSchedulingAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/AddOrDeleteUpdateSourceScheduling", ReplyAction="http://tempuri.org/ISoftwareService/AddOrDeleteUpdateSourceSchedulingResponse")]
        void AddOrDeleteUpdateSourceScheduling(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/AddOrDeleteUpdateSourceScheduling", ReplyAction="http://tempuri.org/ISoftwareService/AddOrDeleteUpdateSourceSchedulingResponse")]
        System.Threading.Tasks.Task AddOrDeleteUpdateSourceSchedulingAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetMainUpdateSourceUrl", ReplyAction="http://tempuri.org/ISoftwareService/GetMainUpdateSourceUrlResponse")]
        string GetMainUpdateSourceUrl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetMainUpdateSourceUrl", ReplyAction="http://tempuri.org/ISoftwareService/GetMainUpdateSourceUrlResponse")]
        System.Threading.Tasks.Task<string> GetMainUpdateSourceUrlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/EditTransferScheduling", ReplyAction="http://tempuri.org/ISoftwareService/EditTransferSchedulingResponse")]
        void EditTransferScheduling(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/EditTransferScheduling", ReplyAction="http://tempuri.org/ISoftwareService/EditTransferSchedulingResponse")]
        System.Threading.Tasks.Task EditTransferSchedulingAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/AddMainUpdateSource", ReplyAction="http://tempuri.org/ISoftwareService/AddMainUpdateSourceResponse")]
        void AddMainUpdateSource(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/AddMainUpdateSource", ReplyAction="http://tempuri.org/ISoftwareService/AddMainUpdateSourceResponse")]
        System.Threading.Tasks.Task AddMainUpdateSourceAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetListOfPackagesForAgentUpdateSourceToDownlo" +
            "ad", ReplyAction="http://tempuri.org/ISoftwareService/GetListOfPackagesForAgentUpdateSourceToDownlo" +
            "adResponse")]
        string GetListOfPackagesForAgentUpdateSourceToDownload(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetListOfPackagesForAgentUpdateSourceToDownlo" +
            "ad", ReplyAction="http://tempuri.org/ISoftwareService/GetListOfPackagesForAgentUpdateSourceToDownlo" +
            "adResponse")]
        System.Threading.Tasks.Task<string> GetListOfPackagesForAgentUpdateSourceToDownloadAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/UpdateStateForAgentUpdateSourceAfterTransferP" +
            "ackageFromParentSource", ReplyAction="http://tempuri.org/ISoftwareService/UpdateStateForAgentUpdateSourceAfterTransferP" +
            "ackageFromParentSourceResponse")]
        void UpdateStateForAgentUpdateSourceAfterTransferPackageFromParentSource(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/UpdateStateForAgentUpdateSourceAfterTransferP" +
            "ackageFromParentSource", ReplyAction="http://tempuri.org/ISoftwareService/UpdateStateForAgentUpdateSourceAfterTransferP" +
            "ackageFromParentSourceResponse")]
        System.Threading.Tasks.Task UpdateStateForAgentUpdateSourceAfterTransferPackageFromParentSourceAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetSoftwareByUpdateSourceId", ReplyAction="http://tempuri.org/ISoftwareService/GetSoftwareByUpdateSourceIdResponse")]
        string GetSoftwareByUpdateSourceId(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftwareService/GetSoftwareByUpdateSourceId", ReplyAction="http://tempuri.org/ISoftwareService/GetSoftwareByUpdateSourceIdResponse")]
        System.Threading.Tasks.Task<string> GetSoftwareByUpdateSourceIdAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISoftwareService/CleanSoftwareForAgentUpdateSource")]
        void CleanSoftwareForAgentUpdateSource(string request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISoftwareService/CleanSoftwareForAgentUpdateSource")]
        System.Threading.Tasks.Task CleanSoftwareForAgentUpdateSourceAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITask/SetTaskProgress")]
        void SetTaskProgress(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITask/SetTaskProgress")]
        System.Threading.Tasks.Task SetTaskProgressAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/AddTask", ReplyAction="http://tempuri.org/ITask/AddTaskResponse")]
        string AddTask(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/AddTask", ReplyAction="http://tempuri.org/ITask/AddTaskResponse")]
        System.Threading.Tasks.Task<string> AddTaskAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/DeleteTask", ReplyAction="http://tempuri.org/ITask/DeleteTaskResponse")]
        void DeleteTask(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/DeleteTask", ReplyAction="http://tempuri.org/ITask/DeleteTaskResponse")]
        System.Threading.Tasks.Task DeleteTaskAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/AssignTaskToDirectory", ReplyAction="http://tempuri.org/ITask/AssignTaskToDirectoryResponse")]
        void AssignTaskToDirectory(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/AssignTaskToDirectory", ReplyAction="http://tempuri.org/ITask/AssignTaskToDirectoryResponse")]
        System.Threading.Tasks.Task AssignTaskToDirectoryAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/AssignTaskToEndpoint", ReplyAction="http://tempuri.org/ITask/AssignTaskToEndpointResponse")]
        void AssignTaskToEndpoint(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/AssignTaskToEndpoint", ReplyAction="http://tempuri.org/ITask/AssignTaskToEndpointResponse")]
        System.Threading.Tasks.Task AssignTaskToEndpointAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetAllTask", ReplyAction="http://tempuri.org/ITask/GetAllTaskResponse")]
        string GetAllTask(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetAllTask", ReplyAction="http://tempuri.org/ITask/GetAllTaskResponse")]
        System.Threading.Tasks.Task<string> GetAllTaskAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetTaskAndSoftware", ReplyAction="http://tempuri.org/ITask/GetTaskAndSoftwareResponse")]
        string GetTaskAndSoftware(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetTaskAndSoftware", ReplyAction="http://tempuri.org/ITask/GetTaskAndSoftwareResponse")]
        System.Threading.Tasks.Task<string> GetTaskAndSoftwareAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetTaskAndSoftwareInfo", ReplyAction="http://tempuri.org/ITask/GetTaskAndSoftwareInfoResponse")]
        string GetTaskAndSoftwareInfo(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetTaskAndSoftwareInfo", ReplyAction="http://tempuri.org/ITask/GetTaskAndSoftwareInfoResponse")]
        System.Threading.Tasks.Task<string> GetTaskAndSoftwareInfoAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetSoftwarePackageForTask", ReplyAction="http://tempuri.org/ITask/GetSoftwarePackageForTaskResponse")]
        string GetSoftwarePackageForTask(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetSoftwarePackageForTask", ReplyAction="http://tempuri.org/ITask/GetSoftwarePackageForTaskResponse")]
        System.Threading.Tasks.Task<string> GetSoftwarePackageForTaskAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetAllSoftwareForTask", ReplyAction="http://tempuri.org/ITask/GetAllSoftwareForTaskResponse")]
        string GetAllSoftwareForTask(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetAllSoftwareForTask", ReplyAction="http://tempuri.org/ITask/GetAllSoftwareForTaskResponse")]
        System.Threading.Tasks.Task<string> GetAllSoftwareForTaskAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetTaskProgress", ReplyAction="http://tempuri.org/ITask/GetTaskProgressResponse")]
        string GetTaskProgress(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetTaskProgress", ReplyAction="http://tempuri.org/ITask/GetTaskProgressResponse")]
        System.Threading.Tasks.Task<string> GetTaskProgressAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetAllTaskProgress", ReplyAction="http://tempuri.org/ITask/GetAllTaskProgressResponse")]
        string GetAllTaskProgress(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetAllTaskProgress", ReplyAction="http://tempuri.org/ITask/GetAllTaskProgressResponse")]
        System.Threading.Tasks.Task<string> GetAllTaskProgressAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetLastUpdateTaskProgress", ReplyAction="http://tempuri.org/ITask/GetLastUpdateTaskProgressResponse")]
        string GetLastUpdateTaskProgress(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetLastUpdateTaskProgress", ReplyAction="http://tempuri.org/ITask/GetLastUpdateTaskProgressResponse")]
        System.Threading.Tasks.Task<string> GetLastUpdateTaskProgressAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyService/GetAllPolicies", ReplyAction="http://tempuri.org/IPolicyService/GetAllPoliciesResponse")]
        string GetAllPolicies(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyService/GetAllPolicies", ReplyAction="http://tempuri.org/IPolicyService/GetAllPoliciesResponse")]
        System.Threading.Tasks.Task<string> GetAllPoliciesAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyService/EditPolicy", ReplyAction="http://tempuri.org/IPolicyService/EditPolicyResponse")]
        void EditPolicy(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyService/EditPolicy", ReplyAction="http://tempuri.org/IPolicyService/EditPolicyResponse")]
        System.Threading.Tasks.Task EditPolicyAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyService/DeletePolicy", ReplyAction="http://tempuri.org/IPolicyService/DeletePolicyResponse")]
        void DeletePolicy(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyService/DeletePolicy", ReplyAction="http://tempuri.org/IPolicyService/DeletePolicyResponse")]
        System.Threading.Tasks.Task DeletePolicyAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyService/AssignPolicy", ReplyAction="http://tempuri.org/IPolicyService/AssignPolicyResponse")]
        void AssignPolicy(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyService/AssignPolicy", ReplyAction="http://tempuri.org/IPolicyService/AssignPolicyResponse")]
        System.Threading.Tasks.Task AssignPolicyAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyService/AddPolicy", ReplyAction="http://tempuri.org/IPolicyService/AddPolicyResponse")]
        string AddPolicy(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyService/AddPolicy", ReplyAction="http://tempuri.org/IPolicyService/AddPolicyResponse")]
        System.Threading.Tasks.Task<string> AddPolicyAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyService/GetFolderPolicies", ReplyAction="http://tempuri.org/IPolicyService/GetFolderPoliciesResponse")]
        string GetFolderPolicies(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyService/GetFolderPolicies", ReplyAction="http://tempuri.org/IPolicyService/GetFolderPoliciesResponse")]
        System.Threading.Tasks.Task<string> GetFolderPoliciesAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyService/GetEndpointPolicies", ReplyAction="http://tempuri.org/IPolicyService/GetEndpointPoliciesResponse")]
        string GetEndpointPolicies(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPolicyService/GetEndpointPolicies", ReplyAction="http://tempuri.org/IPolicyService/GetEndpointPoliciesResponse")]
        System.Threading.Tasks.Task<string> GetEndpointPoliciesAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/SaveSyncData", ReplyAction="http://tempuri.org/ISyncDataService/SaveSyncDataResponse")]
        string SaveSyncData(string syncData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncDataService/SaveSyncData", ReplyAction="http://tempuri.org/ISyncDataService/SaveSyncDataResponse")]
        System.Threading.Tasks.Task<string> SaveSyncDataAsync(string syncData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicensesService/GetLicenses", ReplyAction="http://tempuri.org/ILicensesService/GetLicensesResponse")]
        string GetLicenses(string endpointIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicensesService/GetLicenses", ReplyAction="http://tempuri.org/ILicensesService/GetLicensesResponse")]
        System.Threading.Tasks.Task<string> GetLicensesAsync(string endpointIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuarantineService/GetQuarantine", ReplyAction="http://tempuri.org/IQuarantineService/GetQuarantineResponse")]
        string GetQuarantine(string endpointIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuarantineService/GetQuarantine", ReplyAction="http://tempuri.org/IQuarantineService/GetQuarantineResponse")]
        System.Threading.Tasks.Task<string> GetQuarantineAsync(string endpointIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuarantineService/DeleteQuarantine", ReplyAction="http://tempuri.org/IQuarantineService/DeleteQuarantineResponse")]
        void DeleteQuarantine(string quarantines);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuarantineService/DeleteQuarantine", ReplyAction="http://tempuri.org/IQuarantineService/DeleteQuarantineResponse")]
        System.Threading.Tasks.Task DeleteQuarantineAsync(string quarantines);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuarantineService/RecoverQuarantine", ReplyAction="http://tempuri.org/IQuarantineService/RecoverQuarantineResponse")]
        void RecoverQuarantine(string quarantines);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuarantineService/RecoverQuarantine", ReplyAction="http://tempuri.org/IQuarantineService/RecoverQuarantineResponse")]
        System.Threading.Tasks.Task RecoverQuarantineAsync(string quarantines);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileUploadRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Comment;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Name;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Params;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string SecurityKey;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public double Size;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Version;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string VirtualPath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream DataStream;
        
        public FileUploadRequest() {
        }
        
        public FileUploadRequest(string Comment, string Name, string Params, string SecurityKey, double Size, string Version, string VirtualPath, System.IO.Stream DataStream) {
            this.Comment = Comment;
            this.Name = Name;
            this.Params = Params;
            this.SecurityKey = SecurityKey;
            this.Size = Size;
            this.Version = Version;
            this.VirtualPath = VirtualPath;
            this.DataStream = DataStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadFileResponse {
        
        public UploadFileResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPOCServiceChannel : Tabidus.POC.GUI.ServiceReference.IPOCService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class POCServiceClient : System.ServiceModel.ClientBase<Tabidus.POC.GUI.ServiceReference.IPOCService>, Tabidus.POC.GUI.ServiceReference.IPOCService {
        
        public POCServiceClient() {
        }
        
        public POCServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public POCServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public POCServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public POCServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string SearchEndPoint(string encryptedSearchKey) {
            return base.Channel.SearchEndPoint(encryptedSearchKey);
        }
        
        public System.Threading.Tasks.Task<string> SearchEndPointAsync(string encryptedSearchKey) {
            return base.Channel.SearchEndPointAsync(encryptedSearchKey);
        }
        
        public string GetPagingData(string pagingBase) {
            return base.Channel.GetPagingData(pagingBase);
        }
        
        public System.Threading.Tasks.Task<string> GetPagingDataAsync(string pagingBase) {
            return base.Channel.GetPagingDataAsync(pagingBase);
        }
        
        public string SaveNewFolder(string folderData) {
            return base.Channel.SaveNewFolder(folderData);
        }
        
        public System.Threading.Tasks.Task<string> SaveNewFolderAsync(string folderData) {
            return base.Channel.SaveNewFolderAsync(folderData);
        }
        
        public string SaveDirectoryEndpoint(string endPointData) {
            return base.Channel.SaveDirectoryEndpoint(endPointData);
        }
        
        public System.Threading.Tasks.Task<string> SaveDirectoryEndpointAsync(string endPointData) {
            return base.Channel.SaveDirectoryEndpointAsync(endPointData);
        }
        
        public string GetEndpoint(string request) {
            return base.Channel.GetEndpoint(request);
        }
        
        public System.Threading.Tasks.Task<string> GetEndpointAsync(string request) {
            return base.Channel.GetEndpointAsync(request);
        }
        
        public string GetEndPointForLabel(string request) {
            return base.Channel.GetEndPointForLabel(request);
        }
        
        public System.Threading.Tasks.Task<string> GetEndPointForLabelAsync(string request) {
            return base.Channel.GetEndPointForLabelAsync(request);
        }
        
        public string GetDirectoryEndpointColor(string directoryId) {
            return base.Channel.GetDirectoryEndpointColor(directoryId);
        }
        
        public System.Threading.Tasks.Task<string> GetDirectoryEndpointColorAsync(string directoryId) {
            return base.Channel.GetDirectoryEndpointColorAsync(directoryId);
        }
        
        public string SearchEndPointForLabel(string request) {
            return base.Channel.SearchEndPointForLabel(request);
        }
        
        public System.Threading.Tasks.Task<string> SearchEndPointForLabelAsync(string request) {
            return base.Channel.SearchEndPointForLabelAsync(request);
        }
        
        public string GetAllFolders(string authText) {
            return base.Channel.GetAllFolders(authText);
        }
        
        public System.Threading.Tasks.Task<string> GetAllFoldersAsync(string authText) {
            return base.Channel.GetAllFoldersAsync(authText);
        }
        
        public string GetDirectoryData(string directoryId) {
            return base.Channel.GetDirectoryData(directoryId);
        }
        
        public System.Threading.Tasks.Task<string> GetDirectoryDataAsync(string directoryId) {
            return base.Channel.GetDirectoryDataAsync(directoryId);
        }
        
        public void EditFolder(string folderData) {
            base.Channel.EditFolder(folderData);
        }
        
        public System.Threading.Tasks.Task EditFolderAsync(string folderData) {
            return base.Channel.EditFolderAsync(folderData);
        }
        
        public void EditEndpoint(string endpointData) {
            base.Channel.EditEndpoint(endpointData);
        }
        
        public System.Threading.Tasks.Task EditEndpointAsync(string endpointData) {
            return base.Channel.EditEndpointAsync(endpointData);
        }
        
        public void MoveFoldersAndEndpoints(string data) {
            base.Channel.MoveFoldersAndEndpoints(data);
        }
        
        public System.Threading.Tasks.Task MoveFoldersAndEndpointsAsync(string data) {
            return base.Channel.MoveFoldersAndEndpointsAsync(data);
        }
        
        public string UpdateColumnColor(string request) {
            return base.Channel.UpdateColumnColor(request);
        }
        
        public System.Threading.Tasks.Task<string> UpdateColumnColorAsync(string request) {
            return base.Channel.UpdateColumnColorAsync(request);
        }
        
        public string UpdateColorByParent(string request) {
            return base.Channel.UpdateColorByParent(request);
        }
        
        public System.Threading.Tasks.Task<string> UpdateColorByParentAsync(string request) {
            return base.Channel.UpdateColorByParentAsync(request);
        }
        
        public string ImportFolderComputer(string request) {
            return base.Channel.ImportFolderComputer(request);
        }
        
        public System.Threading.Tasks.Task<string> ImportFolderComputerAsync(string request) {
            return base.Channel.ImportFolderComputerAsync(request);
        }
        
        public string GetAllDirectoryComputer(string request) {
            return base.Channel.GetAllDirectoryComputer(request);
        }
        
        public System.Threading.Tasks.Task<string> GetAllDirectoryComputerAsync(string request) {
            return base.Channel.GetAllDirectoryComputerAsync(request);
        }
        
        public string GetColorModels(string request) {
            return base.Channel.GetColorModels(request);
        }
        
        public System.Threading.Tasks.Task<string> GetColorModelsAsync(string request) {
            return base.Channel.GetColorModelsAsync(request);
        }
        
        public string DeleteDirectoryComputer(string request) {
            return base.Channel.DeleteDirectoryComputer(request);
        }
        
        public System.Threading.Tasks.Task<string> DeleteDirectoryComputerAsync(string request) {
            return base.Channel.DeleteDirectoryComputerAsync(request);
        }
        
        public string GetAllLabel(string request) {
            return base.Channel.GetAllLabel(request);
        }
        
        public System.Threading.Tasks.Task<string> GetAllLabelAsync(string request) {
            return base.Channel.GetAllLabelAsync(request);
        }
        
        public string AddLabel(string request) {
            return base.Channel.AddLabel(request);
        }
        
        public System.Threading.Tasks.Task<string> AddLabelAsync(string request) {
            return base.Channel.AddLabelAsync(request);
        }
        
        public void EditLabelCriteria(string request) {
            base.Channel.EditLabelCriteria(request);
        }
        
        public System.Threading.Tasks.Task EditLabelCriteriaAsync(string request) {
            return base.Channel.EditLabelCriteriaAsync(request);
        }
        
        public string AddLabelCriteria(string request) {
            return base.Channel.AddLabelCriteria(request);
        }
        
        public System.Threading.Tasks.Task<string> AddLabelCriteriaAsync(string request) {
            return base.Channel.AddLabelCriteriaAsync(request);
        }
        
        public void DeleteLabelCriteria(string request) {
            base.Channel.DeleteLabelCriteria(request);
        }
        
        public System.Threading.Tasks.Task DeleteLabelCriteriaAsync(string request) {
            return base.Channel.DeleteLabelCriteriaAsync(request);
        }
        
        public string DeleteLabel(string request) {
            return base.Channel.DeleteLabel(request);
        }
        
        public System.Threading.Tasks.Task<string> DeleteLabelAsync(string request) {
            return base.Channel.DeleteLabelAsync(request);
        }
        
        public string ResetLabel(string request) {
            return base.Channel.ResetLabel(request);
        }
        
        public System.Threading.Tasks.Task<string> ResetLabelAsync(string request) {
            return base.Channel.ResetLabelAsync(request);
        }
        
        public string EditLabel(string request) {
            return base.Channel.EditLabel(request);
        }
        
        public System.Threading.Tasks.Task<string> EditLabelAsync(string request) {
            return base.Channel.EditLabelAsync(request);
        }
        
        public string[] GetLabelParameters(Tabidus.POC.Common.Constants.LabelParameters parameterType) {
            return base.Channel.GetLabelParameters(parameterType);
        }
        
        public System.Threading.Tasks.Task<string[]> GetLabelParametersAsync(Tabidus.POC.Common.Constants.LabelParameters parameterType) {
            return base.Channel.GetLabelParametersAsync(parameterType);
        }
        
        public bool CanRefresh(System.DateTime lastRefresh) {
            return base.Channel.CanRefresh(lastRefresh);
        }
        
        public System.Threading.Tasks.Task<bool> CanRefreshAsync(System.DateTime lastRefresh) {
            return base.Channel.CanRefreshAsync(lastRefresh);
        }
        
        public string GetLastUpdateData() {
            return base.Channel.GetLastUpdateData();
        }
        
        public System.Threading.Tasks.Task<string> GetLastUpdateDataAsync() {
            return base.Channel.GetLastUpdateDataAsync();
        }
        
        public bool CanRefreshEndpoint(System.DateTime lastRefresh, int endpointId) {
            return base.Channel.CanRefreshEndpoint(lastRefresh, endpointId);
        }
        
        public System.Threading.Tasks.Task<bool> CanRefreshEndpointAsync(System.DateTime lastRefresh, int endpointId) {
            return base.Channel.CanRefreshEndpointAsync(lastRefresh, endpointId);
        }
        
        public string AddFolderComputerFromLDAP(string request) {
            return base.Channel.AddFolderComputerFromLDAP(request);
        }
        
        public System.Threading.Tasks.Task<string> AddFolderComputerFromLDAPAsync(string request) {
            return base.Channel.AddFolderComputerFromLDAPAsync(request);
        }
        
        public string GetAssignmentLastUpdateData() {
            return base.Channel.GetAssignmentLastUpdateData();
        }
        
        public System.Threading.Tasks.Task<string> GetAssignmentLastUpdateDataAsync() {
            return base.Channel.GetAssignmentLastUpdateDataAsync();
        }
        
        public string GetAllNeighborhoodWatch(string request) {
            return base.Channel.GetAllNeighborhoodWatch(request);
        }
        
        public System.Threading.Tasks.Task<string> GetAllNeighborhoodWatchAsync(string request) {
            return base.Channel.GetAllNeighborhoodWatchAsync(request);
        }
        
        public string GetAllNetworks(string request) {
            return base.Channel.GetAllNetworks(request);
        }
        
        public System.Threading.Tasks.Task<string> GetAllNetworksAsync(string request) {
            return base.Channel.GetAllNetworksAsync(request);
        }
        
        public void SaveDiscoveries(string stringData) {
            base.Channel.SaveDiscoveries(stringData);
        }
        
        public System.Threading.Tasks.Task SaveDiscoveriesAsync(string stringData) {
            return base.Channel.SaveDiscoveriesAsync(stringData);
        }
        
        public void SaveNeighborhoodWatchConfirmed(string data) {
            base.Channel.SaveNeighborhoodWatchConfirmed(data);
        }
        
        public System.Threading.Tasks.Task SaveNeighborhoodWatchConfirmedAsync(string data) {
            return base.Channel.SaveNeighborhoodWatchConfirmedAsync(data);
        }
        
        public string AddNewEndpointsFromDiscovery(string data) {
            return base.Channel.AddNewEndpointsFromDiscovery(data);
        }
        
        public System.Threading.Tasks.Task<string> AddNewEndpointsFromDiscoveryAsync(string data) {
            return base.Channel.AddNewEndpointsFromDiscoveryAsync(data);
        }
        
        public void DeleteNeighborhoodWatch(string data) {
            base.Channel.DeleteNeighborhoodWatch(data);
        }
        
        public System.Threading.Tasks.Task DeleteNeighborhoodWatchAsync(string data) {
            return base.Channel.DeleteNeighborhoodWatchAsync(data);
        }
        
        public string GetLDAPBYDomain(string data) {
            return base.Channel.GetLDAPBYDomain(data);
        }
        
        public System.Threading.Tasks.Task<string> GetLDAPBYDomainAsync(string data) {
            return base.Channel.GetLDAPBYDomainAsync(data);
        }
        
        public string GetAllLDAP(string data) {
            return base.Channel.GetAllLDAP(data);
        }
        
        public System.Threading.Tasks.Task<string> GetAllLDAPAsync(string data) {
            return base.Channel.GetAllLDAPAsync(data);
        }
        
        public string AddNewLDAP(string data) {
            return base.Channel.AddNewLDAP(data);
        }
        
        public System.Threading.Tasks.Task<string> AddNewLDAPAsync(string data) {
            return base.Channel.AddNewLDAPAsync(data);
        }
        
        public void DeleteLDAP(string data) {
            base.Channel.DeleteLDAP(data);
        }
        
        public System.Threading.Tasks.Task DeleteLDAPAsync(string data) {
            return base.Channel.DeleteLDAPAsync(data);
        }
        
        public string GetAllLDAPDirectoryEndpoint(string data) {
            return base.Channel.GetAllLDAPDirectoryEndpoint(data);
        }
        
        public System.Threading.Tasks.Task<string> GetAllLDAPDirectoryEndpointAsync(string data) {
            return base.Channel.GetAllLDAPDirectoryEndpointAsync(data);
        }
        
        public string GetLDAPByDistinguishedName(string data) {
            return base.Channel.GetLDAPByDistinguishedName(data);
        }
        
        public System.Threading.Tasks.Task<string> GetLDAPByDistinguishedNameAsync(string data) {
            return base.Channel.GetLDAPByDistinguishedNameAsync(data);
        }
        
        public string GetAllLDAPDirectoryEndpointByDomain(string data) {
            return base.Channel.GetAllLDAPDirectoryEndpointByDomain(data);
        }
        
        public System.Threading.Tasks.Task<string> GetAllLDAPDirectoryEndpointByDomainAsync(string data) {
            return base.Channel.GetAllLDAPDirectoryEndpointByDomainAsync(data);
        }
        
        public string GetLDAPLv1(string data) {
            return base.Channel.GetLDAPLv1(data);
        }
        
        public System.Threading.Tasks.Task<string> GetLDAPLv1Async(string data) {
            return base.Channel.GetLDAPLv1Async(data);
        }
        
        public string GetRules(string request) {
            return base.Channel.GetRules(request);
        }
        
        public System.Threading.Tasks.Task<string> GetRulesAsync(string request) {
            return base.Channel.GetRulesAsync(request);
        }
        
        public string AddRule(string request) {
            return base.Channel.AddRule(request);
        }
        
        public System.Threading.Tasks.Task<string> AddRuleAsync(string request) {
            return base.Channel.AddRuleAsync(request);
        }
        
        public string EditRule(string request) {
            return base.Channel.EditRule(request);
        }
        
        public System.Threading.Tasks.Task<string> EditRuleAsync(string request) {
            return base.Channel.EditRuleAsync(request);
        }
        
        public string DeleteRule(string request) {
            return base.Channel.DeleteRule(request);
        }
        
        public System.Threading.Tasks.Task<string> DeleteRuleAsync(string request) {
            return base.Channel.DeleteRuleAsync(request);
        }
        
        public string AddAssignmentRuleCriteria(string request) {
            return base.Channel.AddAssignmentRuleCriteria(request);
        }
        
        public System.Threading.Tasks.Task<string> AddAssignmentRuleCriteriaAsync(string request) {
            return base.Channel.AddAssignmentRuleCriteriaAsync(request);
        }
        
        public string EditAssignmentRuleCriteria(string request) {
            return base.Channel.EditAssignmentRuleCriteria(request);
        }
        
        public System.Threading.Tasks.Task<string> EditAssignmentRuleCriteriaAsync(string request) {
            return base.Channel.EditAssignmentRuleCriteriaAsync(request);
        }
        
        public string DeleteAssignRuleCriteria(string request) {
            return base.Channel.DeleteAssignRuleCriteria(request);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAssignRuleCriteriaAsync(string request) {
            return base.Channel.DeleteAssignRuleCriteriaAsync(request);
        }
        
        public string SaveRule(string request) {
            return base.Channel.SaveRule(request);
        }
        
        public System.Threading.Tasks.Task<string> SaveRuleAsync(string request) {
            return base.Channel.SaveRuleAsync(request);
        }
        
        public string GetActivedRuleByDirectoryId(string dataRequest) {
            return base.Channel.GetActivedRuleByDirectoryId(dataRequest);
        }
        
        public System.Threading.Tasks.Task<string> GetActivedRuleByDirectoryIdAsync(string dataRequest) {
            return base.Channel.GetActivedRuleByDirectoryIdAsync(dataRequest);
        }
        
        public System.IO.Stream GetFile(string virtualPath) {
            return base.Channel.GetFile(virtualPath);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetFileAsync(string virtualPath) {
            return base.Channel.GetFileAsync(virtualPath);
        }
        
        public string GetFileVersion(string virtualPath) {
            return base.Channel.GetFileVersion(virtualPath);
        }
        
        public System.Threading.Tasks.Task<string> GetFileVersionAsync(string virtualPath) {
            return base.Channel.GetFileVersionAsync(virtualPath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Tabidus.POC.GUI.ServiceReference.UploadFileResponse Tabidus.POC.GUI.ServiceReference.IPOCService.UploadFile(Tabidus.POC.GUI.ServiceReference.FileUploadRequest request) {
            return base.Channel.UploadFile(request);
        }
        
        public void UploadFile(string Comment, string Name, string Params, string SecurityKey, double Size, string Version, string VirtualPath, System.IO.Stream DataStream) {
            Tabidus.POC.GUI.ServiceReference.FileUploadRequest inValue = new Tabidus.POC.GUI.ServiceReference.FileUploadRequest();
            inValue.Comment = Comment;
            inValue.Name = Name;
            inValue.Params = Params;
            inValue.SecurityKey = SecurityKey;
            inValue.Size = Size;
            inValue.Version = Version;
            inValue.VirtualPath = VirtualPath;
            inValue.DataStream = DataStream;
            Tabidus.POC.GUI.ServiceReference.UploadFileResponse retVal = ((Tabidus.POC.GUI.ServiceReference.IPOCService)(this)).UploadFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Tabidus.POC.GUI.ServiceReference.UploadFileResponse> Tabidus.POC.GUI.ServiceReference.IPOCService.UploadFileAsync(Tabidus.POC.GUI.ServiceReference.FileUploadRequest request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<Tabidus.POC.GUI.ServiceReference.UploadFileResponse> UploadFileAsync(string Comment, string Name, string Params, string SecurityKey, double Size, string Version, string VirtualPath, System.IO.Stream DataStream) {
            Tabidus.POC.GUI.ServiceReference.FileUploadRequest inValue = new Tabidus.POC.GUI.ServiceReference.FileUploadRequest();
            inValue.Comment = Comment;
            inValue.Name = Name;
            inValue.Params = Params;
            inValue.SecurityKey = SecurityKey;
            inValue.Size = Size;
            inValue.Version = Version;
            inValue.VirtualPath = VirtualPath;
            inValue.DataStream = DataStream;
            return ((Tabidus.POC.GUI.ServiceReference.IPOCService)(this)).UploadFileAsync(inValue);
        }
        
        public string DeleteSoftwareFiles(string request) {
            return base.Channel.DeleteSoftwareFiles(request);
        }
        
        public System.Threading.Tasks.Task<string> DeleteSoftwareFilesAsync(string request) {
            return base.Channel.DeleteSoftwareFilesAsync(request);
        }
        
        public void SyncNow(string request) {
            base.Channel.SyncNow(request);
        }
        
        public System.Threading.Tasks.Task SyncNowAsync(string request) {
            return base.Channel.SyncNowAsync(request);
        }
        
        public string TransferToServerAgent(string request) {
            return base.Channel.TransferToServerAgent(request);
        }
        
        public System.Threading.Tasks.Task<string> TransferToServerAgentAsync(string request) {
            return base.Channel.TransferToServerAgentAsync(request);
        }
        
        public string NewSoftwareTransfer(string request) {
            return base.Channel.NewSoftwareTransfer(request);
        }
        
        public System.Threading.Tasks.Task<string> NewSoftwareTransferAsync(string request) {
            return base.Channel.NewSoftwareTransferAsync(request);
        }
        
        public string GetTransferStatus(string request) {
            return base.Channel.GetTransferStatus(request);
        }
        
        public System.Threading.Tasks.Task<string> GetTransferStatusAsync(string request) {
            return base.Channel.GetTransferStatusAsync(request);
        }
        
        public string GetAllUpdateSource(string request) {
            return base.Channel.GetAllUpdateSource(request);
        }
        
        public System.Threading.Tasks.Task<string> GetAllUpdateSourceAsync(string request) {
            return base.Channel.GetAllUpdateSourceAsync(request);
        }
        
        public string GetAllUpdateSourceSoftware(string request) {
            return base.Channel.GetAllUpdateSourceSoftware(request);
        }
        
        public System.Threading.Tasks.Task<string> GetAllUpdateSourceSoftwareAsync(string request) {
            return base.Channel.GetAllUpdateSourceSoftwareAsync(request);
        }
        
        public void EditUpdateSource(string request) {
            base.Channel.EditUpdateSource(request);
        }
        
        public System.Threading.Tasks.Task EditUpdateSourceAsync(string request) {
            return base.Channel.EditUpdateSourceAsync(request);
        }
        
        public string AddContent(string request) {
            return base.Channel.AddContent(request);
        }
        
        public System.Threading.Tasks.Task<string> AddContentAsync(string request) {
            return base.Channel.AddContentAsync(request);
        }
        
        public void EditContent(string request) {
            base.Channel.EditContent(request);
        }
        
        public System.Threading.Tasks.Task EditContentAsync(string request) {
            return base.Channel.EditContentAsync(request);
        }
        
        public string GetAllSoftware(string request) {
            return base.Channel.GetAllSoftware(request);
        }
        
        public System.Threading.Tasks.Task<string> GetAllSoftwareAsync(string request) {
            return base.Channel.GetAllSoftwareAsync(request);
        }
        
        public void DeleteContent(string request) {
            base.Channel.DeleteContent(request);
        }
        
        public System.Threading.Tasks.Task DeleteContentAsync(string request) {
            return base.Channel.DeleteContentAsync(request);
        }
        
        public string SoftwareInsertOrUpdate(string request) {
            return base.Channel.SoftwareInsertOrUpdate(request);
        }
        
        public System.Threading.Tasks.Task<string> SoftwareInsertOrUpdateAsync(string request) {
            return base.Channel.SoftwareInsertOrUpdateAsync(request);
        }
        
        public string GetTransferScheduling(string request) {
            return base.Channel.GetTransferScheduling(request);
        }
        
        public System.Threading.Tasks.Task<string> GetTransferSchedulingAsync(string request) {
            return base.Channel.GetTransferSchedulingAsync(request);
        }
        
        public string GetAllUpdateSourceScheduling(string request) {
            return base.Channel.GetAllUpdateSourceScheduling(request);
        }
        
        public System.Threading.Tasks.Task<string> GetAllUpdateSourceSchedulingAsync(string request) {
            return base.Channel.GetAllUpdateSourceSchedulingAsync(request);
        }
        
        public void AddOrDeleteUpdateSourceScheduling(string request) {
            base.Channel.AddOrDeleteUpdateSourceScheduling(request);
        }
        
        public System.Threading.Tasks.Task AddOrDeleteUpdateSourceSchedulingAsync(string request) {
            return base.Channel.AddOrDeleteUpdateSourceSchedulingAsync(request);
        }
        
        public string GetMainUpdateSourceUrl() {
            return base.Channel.GetMainUpdateSourceUrl();
        }
        
        public System.Threading.Tasks.Task<string> GetMainUpdateSourceUrlAsync() {
            return base.Channel.GetMainUpdateSourceUrlAsync();
        }
        
        public void EditTransferScheduling(string request) {
            base.Channel.EditTransferScheduling(request);
        }
        
        public System.Threading.Tasks.Task EditTransferSchedulingAsync(string request) {
            return base.Channel.EditTransferSchedulingAsync(request);
        }
        
        public void AddMainUpdateSource(string request) {
            base.Channel.AddMainUpdateSource(request);
        }
        
        public System.Threading.Tasks.Task AddMainUpdateSourceAsync(string request) {
            return base.Channel.AddMainUpdateSourceAsync(request);
        }
        
        public string GetListOfPackagesForAgentUpdateSourceToDownload(string request) {
            return base.Channel.GetListOfPackagesForAgentUpdateSourceToDownload(request);
        }
        
        public System.Threading.Tasks.Task<string> GetListOfPackagesForAgentUpdateSourceToDownloadAsync(string request) {
            return base.Channel.GetListOfPackagesForAgentUpdateSourceToDownloadAsync(request);
        }
        
        public void UpdateStateForAgentUpdateSourceAfterTransferPackageFromParentSource(string request) {
            base.Channel.UpdateStateForAgentUpdateSourceAfterTransferPackageFromParentSource(request);
        }
        
        public System.Threading.Tasks.Task UpdateStateForAgentUpdateSourceAfterTransferPackageFromParentSourceAsync(string request) {
            return base.Channel.UpdateStateForAgentUpdateSourceAfterTransferPackageFromParentSourceAsync(request);
        }
        
        public string GetSoftwareByUpdateSourceId(string request) {
            return base.Channel.GetSoftwareByUpdateSourceId(request);
        }
        
        public System.Threading.Tasks.Task<string> GetSoftwareByUpdateSourceIdAsync(string request) {
            return base.Channel.GetSoftwareByUpdateSourceIdAsync(request);
        }
        
        public void CleanSoftwareForAgentUpdateSource(string request) {
            base.Channel.CleanSoftwareForAgentUpdateSource(request);
        }
        
        public System.Threading.Tasks.Task CleanSoftwareForAgentUpdateSourceAsync(string request) {
            return base.Channel.CleanSoftwareForAgentUpdateSourceAsync(request);
        }
        
        public void SetTaskProgress(string message) {
            base.Channel.SetTaskProgress(message);
        }
        
        public System.Threading.Tasks.Task SetTaskProgressAsync(string message) {
            return base.Channel.SetTaskProgressAsync(message);
        }
        
        public string AddTask(string request) {
            return base.Channel.AddTask(request);
        }
        
        public System.Threading.Tasks.Task<string> AddTaskAsync(string request) {
            return base.Channel.AddTaskAsync(request);
        }
        
        public void DeleteTask(string request) {
            base.Channel.DeleteTask(request);
        }
        
        public System.Threading.Tasks.Task DeleteTaskAsync(string request) {
            return base.Channel.DeleteTaskAsync(request);
        }
        
        public void AssignTaskToDirectory(string request) {
            base.Channel.AssignTaskToDirectory(request);
        }
        
        public System.Threading.Tasks.Task AssignTaskToDirectoryAsync(string request) {
            return base.Channel.AssignTaskToDirectoryAsync(request);
        }
        
        public void AssignTaskToEndpoint(string request) {
            base.Channel.AssignTaskToEndpoint(request);
        }
        
        public System.Threading.Tasks.Task AssignTaskToEndpointAsync(string request) {
            return base.Channel.AssignTaskToEndpointAsync(request);
        }
        
        public string GetAllTask(string request) {
            return base.Channel.GetAllTask(request);
        }
        
        public System.Threading.Tasks.Task<string> GetAllTaskAsync(string request) {
            return base.Channel.GetAllTaskAsync(request);
        }
        
        public string GetTaskAndSoftware(string request) {
            return base.Channel.GetTaskAndSoftware(request);
        }
        
        public System.Threading.Tasks.Task<string> GetTaskAndSoftwareAsync(string request) {
            return base.Channel.GetTaskAndSoftwareAsync(request);
        }
        
        public string GetTaskAndSoftwareInfo(string request) {
            return base.Channel.GetTaskAndSoftwareInfo(request);
        }
        
        public System.Threading.Tasks.Task<string> GetTaskAndSoftwareInfoAsync(string request) {
            return base.Channel.GetTaskAndSoftwareInfoAsync(request);
        }
        
        public string GetSoftwarePackageForTask(string request) {
            return base.Channel.GetSoftwarePackageForTask(request);
        }
        
        public System.Threading.Tasks.Task<string> GetSoftwarePackageForTaskAsync(string request) {
            return base.Channel.GetSoftwarePackageForTaskAsync(request);
        }
        
        public string GetAllSoftwareForTask(string request) {
            return base.Channel.GetAllSoftwareForTask(request);
        }
        
        public System.Threading.Tasks.Task<string> GetAllSoftwareForTaskAsync(string request) {
            return base.Channel.GetAllSoftwareForTaskAsync(request);
        }
        
        public string GetTaskProgress(string request) {
            return base.Channel.GetTaskProgress(request);
        }
        
        public System.Threading.Tasks.Task<string> GetTaskProgressAsync(string request) {
            return base.Channel.GetTaskProgressAsync(request);
        }
        
        public string GetAllTaskProgress(string request) {
            return base.Channel.GetAllTaskProgress(request);
        }
        
        public System.Threading.Tasks.Task<string> GetAllTaskProgressAsync(string request) {
            return base.Channel.GetAllTaskProgressAsync(request);
        }
        
        public string GetLastUpdateTaskProgress(string request) {
            return base.Channel.GetLastUpdateTaskProgress(request);
        }
        
        public System.Threading.Tasks.Task<string> GetLastUpdateTaskProgressAsync(string request) {
            return base.Channel.GetLastUpdateTaskProgressAsync(request);
        }
        
        public string GetAllPolicies(string request) {
            return base.Channel.GetAllPolicies(request);
        }
        
        public System.Threading.Tasks.Task<string> GetAllPoliciesAsync(string request) {
            return base.Channel.GetAllPoliciesAsync(request);
        }
        
        public void EditPolicy(string request) {
            base.Channel.EditPolicy(request);
        }
        
        public System.Threading.Tasks.Task EditPolicyAsync(string request) {
            return base.Channel.EditPolicyAsync(request);
        }
        
        public void DeletePolicy(string request) {
            base.Channel.DeletePolicy(request);
        }
        
        public System.Threading.Tasks.Task DeletePolicyAsync(string request) {
            return base.Channel.DeletePolicyAsync(request);
        }
        
        public void AssignPolicy(string request) {
            base.Channel.AssignPolicy(request);
        }
        
        public System.Threading.Tasks.Task AssignPolicyAsync(string request) {
            return base.Channel.AssignPolicyAsync(request);
        }
        
        public string AddPolicy(string request) {
            return base.Channel.AddPolicy(request);
        }
        
        public System.Threading.Tasks.Task<string> AddPolicyAsync(string request) {
            return base.Channel.AddPolicyAsync(request);
        }
        
        public string GetFolderPolicies(string request) {
            return base.Channel.GetFolderPolicies(request);
        }
        
        public System.Threading.Tasks.Task<string> GetFolderPoliciesAsync(string request) {
            return base.Channel.GetFolderPoliciesAsync(request);
        }
        
        public string GetEndpointPolicies(string request) {
            return base.Channel.GetEndpointPolicies(request);
        }
        
        public System.Threading.Tasks.Task<string> GetEndpointPoliciesAsync(string request) {
            return base.Channel.GetEndpointPoliciesAsync(request);
        }
        
        public string SaveSyncData(string syncData) {
            return base.Channel.SaveSyncData(syncData);
        }
        
        public System.Threading.Tasks.Task<string> SaveSyncDataAsync(string syncData) {
            return base.Channel.SaveSyncDataAsync(syncData);
        }
        
        public string GetLicenses(string endpointIDs) {
            return base.Channel.GetLicenses(endpointIDs);
        }
        
        public System.Threading.Tasks.Task<string> GetLicensesAsync(string endpointIDs) {
            return base.Channel.GetLicensesAsync(endpointIDs);
        }
        
        public string GetQuarantine(string endpointIDs) {
            return base.Channel.GetQuarantine(endpointIDs);
        }
        
        public System.Threading.Tasks.Task<string> GetQuarantineAsync(string endpointIDs) {
            return base.Channel.GetQuarantineAsync(endpointIDs);
        }
        
        public void DeleteQuarantine(string quarantines) {
            base.Channel.DeleteQuarantine(quarantines);
        }
        
        public System.Threading.Tasks.Task DeleteQuarantineAsync(string quarantines) {
            return base.Channel.DeleteQuarantineAsync(quarantines);
        }
        
        public void RecoverQuarantine(string quarantines) {
            base.Channel.RecoverQuarantine(quarantines);
        }
        
        public System.Threading.Tasks.Task RecoverQuarantineAsync(string quarantines) {
            return base.Channel.RecoverQuarantineAsync(quarantines);
        }
    }
}
