<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:igPrim="http://schemas.infragistics.com/xaml/primitives"
                    xmlns:ig="http://schemas.infragistics.com/xaml"
                    xmlns:igWindows="http://infragistics.com/Windows"
                    xmlns:igDP="http://infragistics.com/DataPresenter"
                   xmlns:local="clr-namespace:Tabidus.POC.GUI.View"
                    xmlns:common="clr-namespace:Tabidus.POC.GUI.Common"
                    xmlns:sw="clr-namespace:WpfStyleableWindow.StyleableWindow">
<!--    Window style-->
    <!--Customized Window 11-04-2019-->
    <SolidColorBrush x:Key="WindowColor" Color="Black"/>
    <!--<SolidColorBrush x:Key="WindowBackColor" Color="Black"/>-->
    <!--<Image x:Key="WindowColor" Source="../Images/Titlebar.png"/>
    <Image x:Key="WindowBackColor" Source="../Images/Titlebar.png"/>-->
    <SolidColorBrush x:Key="WindowForeColor" Color="#66000000"/>
    <SolidColorBrush x:Key="WindowForeHighlightColor" Color="#66000000"/>
    <SolidColorBrush x:Key="WindowButtonColor" Color="Transparent"/>
    <SolidColorBrush x:Key="WindowButtonOverColor" Color="#66000000"/>
    <SolidColorBrush x:Key="WindowButtonPressedColor" Color="#66000000"/>

    <sw:WindowMinimizeCommand x:Key="MinimizeCommand"></sw:WindowMinimizeCommand>
    <sw:WindowMaximizeCommand x:Key="MaximizeCommand"></sw:WindowMaximizeCommand>
    <sw:WindowCloseCommand x:Key="CloseCommand"></sw:WindowCloseCommand>

    <Style TargetType="{x:Type Button}" x:Key="WindowButton">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="25"/>
        <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
        <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowColor}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource WindowButtonOverColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource WindowButtonPressedColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Image}" x:Key="WindowIcon">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="25"/>
    </Style>
    <Style x:Key="CustomWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="MinWidth" Value="200"/>
        <Setter Property="MinHeight" Value="46"/>
        <!--CaptionHeight + ResizeBorderThickness * 2-->
        <Setter Property="Template" Value="{StaticResource WindowTemplate}"/>
    </Style>
    <ControlTemplate x:Key="WindowTemplate" TargetType="{x:Type Window}">
        <!--<Grid Background="{StaticResource WindowBackColor}">-->
        <Grid>
            <Grid.Background>
                <ImageBrush ImageSource="../Images/Titlebar_new.jpg"></ImageBrush>
            </Grid.Background>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="33"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" Margin="0,0,5,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Image Source="../Images/logo--- (1).png" HorizontalAlignment="Left"></Image>
                    <TextBlock Grid.Column="1" VerticalAlignment="Center" Text="U   N   I   T   E   D      C   O   N   T   R   O   L      C   E   N   T   E   R" Margin="10 0 10 0" FontSize="11" Foreground="White"  HorizontalAlignment="Left"></TextBlock>
                    <Label Grid.Column="1" DockPanel.Dock="Left" Content="{TemplateBinding Property=Title}" Padding="3,0,0,0"                                                                                   
                           HorizontalContentAlignment="Center" 
                           VerticalContentAlignment="Center" 
                           HorizontalAlignment="Stretch" 
                           VerticalAlignment="Stretch" 
                           Foreground="{StaticResource WindowForeColor}"                                            
                           FontSize="16" 
                           sw:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                           sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource MaximizeCommand}" 
                           sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                           sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                           sw:ShowSystemMenuBehavior.RightButtonShow="true">
                    </Label>
                    <StackPanel Grid.Column="2" Orientation="Horizontal" Margin="10 0 0 0">
                        <Button DockPanel.Dock="Right"  Height="30" Width="30"  Style="{StaticResource WindowButton}" Command="{StaticResource MinimizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">
                            <Button.Content>
                                <Image Source="../Images/min.png" Height="12" Width="12" VerticalAlignment="Center" HorizontalAlignment="Center"></Image>
                            </Button.Content>
                        </Button>
                        <Button DockPanel.Dock="Right" Height="30" Width="30" Style="{StaticResource WindowButton}" Command="{StaticResource MaximizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">
                            <Button.Content>
                                <Image Source="../Images/max.png" Height="10" Width="10" VerticalAlignment="Center" HorizontalAlignment="Center"></Image>
                            </Button.Content>
                        </Button>
                        <Button DockPanel.Dock="Right" Height="30" Width="30"  Style="{StaticResource WindowButton}" Command="{StaticResource CloseCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">
                            <Button.Content>
                                <Image Source="../Images/close.png" Height="10" Width="10" VerticalAlignment="Center" HorizontalAlignment="Center" ></Image>
                            </Button.Content>
                        </Button>
                    </StackPanel>
                </Grid>
                <Border Grid.Row="1" BorderBrush="Black" BorderThickness="0" Background="{TemplateBinding Background}">
                    <Grid>
                        <AdornerDecorator>
                            <ContentPresenter x:Name="WindowContent"/>
                        </AdornerDecorator>
                        <ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                    </Grid>
                </Border>
            </Grid>
            <Thumb x:Name="ThumbTop" Height="6" Margin="14,0" VerticalAlignment="Top" Cursor="SizeNS"  Opacity="0" sw:WindowResizeBehavior.TopResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbTopLeft" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Left" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.TopLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbBottom" Height="6" Margin="14,0" VerticalAlignment="Bottom" Cursor="SizeNS" Opacity="0" sw:WindowResizeBehavior.BottomResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbTopRight" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Right" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.TopRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbRight" HorizontalAlignment="Right" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.RightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbBottomRight" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Right" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.BottomRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbLeft" HorizontalAlignment="Left" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.LeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbBottomLeft" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Left" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.BottomLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                    <Condition Property="WindowState" Value="Normal"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--the red style window-->
    <Style x:Key="RedWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="MinHeight" Value="46"/>
        <Setter Property="Background" Value="white"/>
        <Setter Property="BorderBrush" Value="DarkRed"/>
        <Setter Property="BorderThickness" Value="7"/>
        <Setter Property="Foreground" Value="DarkGray"/>
        <Setter Property="Template" Value="{StaticResource WindowTemplate}"/>
    </Style>
 <!--End-->
    <Style TargetType="local:GenericXamlDialogWindow" x:Key="Headerstyle">
        <Setter Property="HeaderBackground" Value="Green"></Setter>
        <Setter Property="HeaderIconVisibility" Value="Collapsed"></Setter>
    </Style>
    
    <!--Confirmdialogue style-->

    <ControlTemplate x:Key="WindowTemplate_confirmdialogue" TargetType="{x:Type Window}">
        <!--<Grid Background="{StaticResource WindowBackColor}">-->
        <Grid>
            <Grid.Background>
                <ImageBrush ImageSource="../Images/confirmdialogue_header_bg.jpg"></ImageBrush>
            </Grid.Background>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="30"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" Margin="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <StackPanel Background="#80000000">
                        <Image Source="../Images/congirmdialogue_header.png" HorizontalAlignment="Left" Margin="7"></Image>
                    </StackPanel>
                    <!--<TextBlock Grid.Column="1" VerticalAlignment="Center" Text="CONFIRM DELETE" Margin="10 0 10 0" FontSize="12" Foreground="White" HorizontalAlignment="Left"></TextBlock>-->
                    
                    <StackPanel Grid.Column="2" Orientation="Horizontal" Margin="10 0 0 0">
                        <Button DockPanel.Dock="Right" Height="30" Width="30"  Style="{StaticResource WindowButton}" Command="{StaticResource CloseCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">
                            <Button.Content>
                                <Image Source="../Images/close.png" Height="10" Width="10" VerticalAlignment="Center" HorizontalAlignment="Center" ></Image>
                            </Button.Content>
                        </Button>
                    </StackPanel>
                </Grid>
                <Border Grid.Row="1" BorderBrush="Black" BorderThickness="0" Background="{TemplateBinding Background}">
                    <Grid>
                        <AdornerDecorator>
                            <ContentPresenter x:Name="WindowContent"/>
                        </AdornerDecorator>
                        <ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                    </Grid>
                </Border>
            </Grid>
            <Thumb x:Name="ThumbTop" Height="6" Margin="14,0" VerticalAlignment="Top" Cursor="SizeNS"  Opacity="0" sw:WindowResizeBehavior.TopResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbTopLeft" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Left" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.TopLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbBottom" Height="6" Margin="14,0" VerticalAlignment="Bottom" Cursor="SizeNS" Opacity="0" sw:WindowResizeBehavior.BottomResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbTopRight" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Right" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.TopRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbRight" HorizontalAlignment="Right" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.RightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbBottomRight" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Right" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.BottomRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbLeft" HorizontalAlignment="Left" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.LeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbBottomLeft" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Left" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.BottomLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                    <Condition Property="WindowState" Value="Normal"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
   
    <Style x:Key="RedWindowStyle_confirmdialogue" TargetType="{x:Type Window}">
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="MinHeight" Value="46"/>
        <Setter Property="Background" Value="white"/>
        <Setter Property="BorderBrush" Value="DarkRed"/>
        <Setter Property="BorderThickness" Value="7"/>
        <Setter Property="Foreground" Value="DarkGray"/>
        <Setter Property="Template" Value="{StaticResource WindowTemplate_confirmdialogue}"/>
    </Style>
    <!--End-->
    
    <Style x:Key="MainWindow" 
           TargetType="{x:Type Window}">
        <Setter Property="Foreground" 
                Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid>
                        <Border x:Name="MainBorder" 
                                BorderBrush="{DynamicResource MainWindowBorderBrush}" 
                                BorderThickness="1" 
                                CornerRadius="2" 
                                Background="Red">
                            <DockPanel LastChildFill="True">
                                <Rectangle x:Name="PART_LEFT_BORDER" 
                                           Width="2" 
                                           Cursor="SizeWE">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="Transparent" />
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Rectangle x:Name="PART_RIGHT_BORDER" 
                                           Cursor="SizeWE" 
                                           Width="2" 
                                           DockPanel.Dock="Right">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="Transparent" />
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Rectangle x:Name="PART_TOP_BORDER" 
                                           Cursor="SizeNS" 
                                           DockPanel.Dock="Top" 
                                           Height="2">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="Transparent" />
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Rectangle x:Name="PART_BOTTOM_BORDER" 
                                           Cursor="SizeNS" 
                                           Height="2" 
                                           DockPanel.Dock="Bottom">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="Transparent" />
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Border x:Name="PART_TITLEBAR" 
                                        Margin="2,0,2,2" 
                                        Height="40" 
                                        DockPanel.Dock="Top" 
                                        CornerRadius="2" 
                                        Background="Transparent">
                                    <DockPanel LastChildFill="False">
                                        <TextBlock Margin="8,0,0,4" 
                                                   VerticalAlignment="Center" 
                                                   FontStretch="UltraExpanded" 
                                                   Foreground="Black" 
                                                   TextTrimming="CharacterEllipsis" 
                                                   TextWrapping="NoWrap" 
                                                   Text="{TemplateBinding Title}" 
                                                   FontSize="16" />
                                        <Button x:Name="PART_CLOSE" 
                                                DockPanel.Dock="Right" 
                                                Style="{DynamicResource FlatButton}" 
                                                VerticalAlignment="Center" 
                                                Margin="0,0,4,0">
                                            <Image Source="/Tabidus.POC.GUI;component/Images/Close.png" 
                                                   Stretch="None" 
                                                   Margin="4" />
                                        </Button>
                                        <Button x:Name="PART_MAXIMIZE_RESTORE" 
                                                DockPanel.Dock="Right" 
                                                HorizontalAlignment="Center" 
                                                VerticalAlignment="Center" 
                                                Style="{DynamicResource FlatButton}">
                                            <Image x:Name="MaximizeRestoreImage" 
                                                   Source="/Tabidus.POC.GUI;component/Images/Restore.png" 
                                                   Stretch="None" 
                                                   Margin="4" />
                                        </Button>
                                        <Button x:Name="PART_MINIMIZE" 
                                                HorizontalAlignment="Center" 
                                                Style="{DynamicResource FlatButton}" 
                                                VerticalAlignment="Center" 
                                                DockPanel.Dock="Right">
                                            <Image Margin="4" 
                                                   Source="/Tabidus.POC.GUI;component/Images/Minimize.png" 
                                                   Stretch="None" />
                                        </Button>
                                    </DockPanel>
                                </Border>

                                <!-- Title bar separator-->
                                <Border Height="1" 
                                        DockPanel.Dock="Top" 
                                        Background="{DynamicResource 
					MainWindowTitleBarSeparator}" />

                                <!-- Actual Window Content -->
                                <AdornerDecorator DockPanel.Dock="Bottom">
                                    <ContentPresenter />
                                </AdornerDecorator>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource=
				{RelativeSource Self}, Path=Maximized}" 
                                     Value="False">
                            <!--<Setter TargetName="MaximizeRestoreImage" 
                                    Property="Source" 
                                    Value="/Tabidus.POC.GUI;component/Images/Desktop.png" />-->
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <common:PlatformConverter x:Key="PlatformConverter"/>
    <common:TextInputToVisibilityConverter x:Key="TextInputToVisibilityConverter"/>
    <common:ComboboxVisibleConverter x:Key="ComboboxVisibleConverter"/>
    <common:TextBoxCriteriaVisibleConverter x:Key="TextBoxCriteriaVisibleConverter"/>
    <common:SubnetAndVisibleConverter x:Key="SubnetAndVisibleConverter"/>
    <common:SubnetConverter x:Key="SubnetConverter"/>
    <SolidColorBrush x:Key="brushWatermarkForeground" Color="LightSteelBlue" />
    <Color x:Key="accentColor">Transparent</Color>
    <Color x:Key="backgroundColor">Transparent</Color>
    <Color x:Key="TextDefaultColor">#8e8f98</Color>
    <Color x:Key="backgroundColorCode">Transparent</Color>
    <Color x:Key="textblockColorCode">#FFFFFF</Color>
    <Color x:Key="ColorPagetextblockColorCode">#5e5f66</Color>
    <Color x:Key="textblockColorCodes">#5e5f66</Color>
    <Color x:Key="EndpointViewBackgroundColor">#C6CCD8</Color>
    <Color x:Key="EndpointViewIconText">#D7DCE7</Color>
     
    <SolidColorBrush Color="{StaticResource accentColor}" x:Key="accentColorBrush" />
    <SolidColorBrush Color="{StaticResource backgroundColor}" x:Key="backgroundColorBrush" />
    <SolidColorBrush Color="{StaticResource TextDefaultColor}" x:Key="TextDefaultColorBrush" />
    <SolidColorBrush Color="{StaticResource backgroundColorCode}" x:Key="backgroundColorCodeBrush"/>
    <SolidColorBrush Color="{StaticResource EndpointViewBackgroundColor}" x:Key="EndpointViewBackgroundColorBrush" />
    <SolidColorBrush Color="{StaticResource textblockColorCode}" x:Key="textblockColorCodeBrush" />
    <SolidColorBrush Color="{StaticResource ColorPagetextblockColorCode}" x:Key="ColorPagetextblockColorCodeBrush" />
    <SolidColorBrush Color="{StaticResource EndpointViewIconText}" x:Key="EndpointViewIconTextBrush" />
    <!--<Color x:Key="LabelCriteriaBackgroundColor">#ECEDF0</Color>-->
    
    <Color x:Key="LabelCriteriaBackgroundColor">#08FFFFFF</Color>

    <Color x:Key="BlackOpacity3">#000000</Color>
    <Color x:Key="BlackOpacity6">#0F000000</Color>
    <Color x:Key="BlackOpacity20">#33000000</Color>
    <Color x:Key="BlackOpacity30">#4D000000</Color>
    <Color x:Key="BlackOpacity40">#66000000</Color>

    <Color x:Key="WhiteOpacity3">#08FFFFFF</Color>
    <Color x:Key="WhiteOpacity6">#0FFFFFFF</Color>
    <Color x:Key="WhiteOpacity20">#33FFFFFF</Color>
    <Color x:Key="WhiteOpacity30">#4DFFFFFF</Color>

    <SolidColorBrush Color="{StaticResource BlackOpacity40}" x:Key="BlackOpacity40Brush" />

    <SolidColorBrush Color="{StaticResource LabelCriteriaBackgroundColor}" x:Key="LabelCriteriaBackgroundColorBrush" />
    <!-- #BEGIN SNIPPET# -->
    <Style TargetType="igWindows:ExpansionIndicator">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igWindows:ExpansionIndicator">
                    <Grid>
                        <Border x:Name="expansionsBtn" BorderThickness="1" Width="30" Height="30" Cursor="Hand" Background="{StaticResource backgroundColorBrush}" BorderBrush="{StaticResource accentColorBrush}" Margin="0" >
                            <Path
                      x:Name="ArrowPath"
                      Width="6"
                      Height="10"
                      Stretch="Fill"
                      StrokeThickness="0"
                                        Fill="White"
                                        Data="M0,0 L4,3.5 L0,7 z"
                      Visibility="Visible"
                      RenderOptions.EdgeMode="Aliased" VerticalAlignment="Center" HorizontalAlignment="Center" UseLayoutRounding="True" Margin="2,0,0,0">
                                <Path.RenderTransform>
                                    <RotateTransform CenterX="3" CenterY="5" Angle="0" />
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.2" To="{StaticResource accentColor}" Storyboard.TargetName="expansionsBtn" Storyboard.TargetProperty="BorderBrush.Color" />
                                        <ColorAnimation Duration="0:0:0.2" To="{StaticResource accentColor}" Storyboard.TargetName="expansionsBtn" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation Duration="0:0:0.2" To="White" Storyboard.TargetName="ArrowPath" Storyboard.TargetProperty="Fill.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.15" To="{StaticResource accentColor}" Storyboard.TargetName="expansionsBtn" Storyboard.TargetProperty="BorderBrush.Color" />
                                        <ColorAnimation Duration="0:0:0.15" To="{StaticResource backgroundColor}" Storyboard.TargetName="expansionsBtn" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation Duration="0:0:0.15" To="White" Storyboard.TargetName="ArrowPath" Storyboard.TargetProperty="Fill.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ArrowPath" Property="Margin" Value="0,0,0,0" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" To="90" Storyboard.TargetProperty="RenderTransform.Angle" Storyboard.TargetName="ArrowPath" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.15" To="0" Storyboard.TargetProperty="RenderTransform.Angle" Storyboard.TargetName="ArrowPath" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <common:ImageEndpointStatusConverter x:Key="ImageEndpointStatusConverter" />
    <common:TextSearchInputToVisibilityConverter x:Key="TextSearchInputToVisibilityConverter"/>
    <BooleanToVisibilityConverter x:Key="BoolToVisConverter" />
    <common:InvertBoolConverter x:Key="InvertBoolConverter"/>
    <common:InvertBoolToVisConverter x:Key="InvertBoolToVisConverter"/>
    <common:CollapsedImageConverter x:Key="CollapsedImageConverter"/>
    <common:ExpandedImageConverter x:Key="ExpandedImageConverter"/>
    <Style x:Key="ListViewHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Background" Value="#FFCDE7F4" />
        <Setter Property="Foreground" Value="#FF07034B"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFA1CCE0" Offset="0"/>
                    <GradientStop Color="#FFABD5EA" Offset="1.0"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>        
    </Style>
    <Style x:Key="AlternatingStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Top"></Setter>
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                <Setter Property="Background" Value="LightGray"></Setter>
            </Trigger>
            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="Background" Value="White"></Setter>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="Orange"/>
            </Trigger>
        </Style.Triggers>
    </Style>
<!--    TreeView style-->
    <igPrim:BoolToVisibilityConverter x:Key="BoolToVis" />
    <SolidColorBrush x:Key="NodeLineBrush" Color="Red" />
    <SolidColorBrush x:Key="LineTerminatorBrush" Color="#FFA3AEB9" />
    <!--            Styling for expander arrow border-->
    <LinearGradientBrush x:Key="SilverlightDarkBrush"
                                 EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#52575D" Offset="0" />
        <GradientStop Color="#52575D" Offset="0.375" />
        <GradientStop Color="#52575D" Offset="0.375" />
        <GradientStop Color="#52575D" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="SilverlightLightBrush"
                                 StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0" Color="#FFfefefe" />
                <GradientStop Offset="0.5" Color="#FFeff1f2" />
                <GradientStop Offset="1" Color="#FFd0d6db" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <!--Styling for item hovered border color -->
    <SolidColorBrush x:Key="ItemHottrackOuterBorderFill"
                             Color="{StaticResource backgroundColor}" />
    <!--Styling for item hovered background color -->
    <SolidColorBrush x:Key="ItemHottrackCenterFill"
                                Color="#ff000000"/>
    <!--Styling for item selected border color -->
    <SolidColorBrush x:Key="ItemSelectedOuterBorderFill" Color="Transparent" />
    <!--Styling for item selected background color -->
    <SolidColorBrush x:Key="ItemSelectedCenterFill"
                                Color="Transparent"/>
    <SolidColorBrush x:Key="DropIndicatorFill" Color="#FF6DBDD1" />
    <SolidColorBrush x:Key="MetroBackgroundButton" Color="#FF28272d"></SolidColorBrush>

    <Style x:Key="ExpansionIndicatorStyle1" TargetType="igPrim:ExpansionIndicator">
        <Setter Property="Background" Value="#FF666666" />
        <Setter Property="BorderBrush" Value="#FF666666" />
        <!--<Setter Property="Opacity" Value="0.2"></Setter>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igPrim:ExpansionIndicator">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Selected" />
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <!--<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Margin" BeginTime="00:00:00">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Thickness>17 0 5 0</Thickness>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>-->
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                                               Storyboard.TargetName="rectangle">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Collapsed"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <!--Styling for expander arrow (width, height) -->
                        <Grid x:Name="ExpansionIndicator"
                                      Background="#00000000"
                                      Grid.ColumnSpan="2"
                                      Grid.RowSpan="2">
                            <Border BorderBrush="Black"
                                            BorderThickness="0"
                                            Width="13"
                                            Height="13" Margin="15 0 0 0"
                                            CornerRadius="0">
                                <Grid>
                                    <Rectangle Fill="#818085"
                                                       Width="10"
                                                       Height="2" />
                                    <Rectangle x:Name="rectangle"
                                                       Fill="#818085"
                                                       Height="10"
                                                       Width="2" />
                                </Grid>
                            </Border>
                        </Grid>
                        <ContentPresenter Grid.Column="2"
                                                  Margin="{TemplateBinding Padding}"
                                                  VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <common:ComputerImageTypeConverter x:Key="ComputerImageTypeConverter" />
    <common:ColorConverter x:Key="ColorConverter" />
    <common:ColorConvertorFileImport x:Key="ColorConvertorFileImport" />
    
    <Style TargetType="ig:XamDataTreeNodeControl">
        <Setter Property="Background"
                        Value="Transparent"></Setter>
        <Setter Property="Width" Value="{Binding Node.Data.NodeWidth}"></Setter>
        <Setter Property="Height" Value="30"></Setter>
        <Setter Property="IsTabStop"
                        Value="False"></Setter>
        <Setter Property="BorderThickness"
                        Value="1" />
        <Setter Property="HorizontalContentAlignment"
                        Value="Left" />
        <Setter Property="VerticalContentAlignment"
                        Value="Center" />
        <Setter Property="Padding"
                        Value="5,0" />
        <Setter Property="FontSize"	Value="11" />
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=OpenSansRegular}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ig:XamDataTreeNodeControl">
                    <Grid Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"></VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                               Duration="00:00:00"
                                                                               Storyboard.TargetName="hoverBorder"
                                                                               Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="main"
                                                                               Storyboard.TargetProperty="Opacity">
                                            <EasingDoubleKeyFrame KeyTime="0"
                                                                          Value="0.35" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ExpandedIconStates">
                                <VisualState x:Name="HideIcons"></VisualState>
                                <VisualState x:Name="ShowCollapsedIcon">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                               Duration="00:00:00"
                                                                               Storyboard.TargetName="CollapsedIcon"
                                                                               Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="ShowExpandedIcon">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                               Duration="00:00:00"
                                                                               Storyboard.TargetName="ExpandedIcon"
                                                                               Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive"></VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectedStates">
                                <VisualState x:Name="NotSelected"></VisualState>
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                               Duration="00:00:00"
                                                                               Storyboard.TargetName="SelectedBorder"
                                                                               Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="EndLines">
                                <VisualState x:Name="None">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                               Duration="00:00:00"
                                                                               Storyboard.TargetName="LineTerminator"
                                                                               Storyboard.TargetProperty="NodeLineEnd">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <ig:NodeLineTemination>None</ig:NodeLineTemination>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="TShape">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                               Duration="00:00:00"
                                                                               Storyboard.TargetName="LineTerminator"
                                                                               Storyboard.TargetProperty="NodeLineEnd">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <ig:NodeLineTemination>TShape</ig:NodeLineTemination>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="LShape">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                               Duration="00:00:00"
                                                                               Storyboard.TargetName="LineTerminator"
                                                                               Storyboard.TargetProperty="NodeLineEnd">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <ig:NodeLineTemination>LShape</ig:NodeLineTemination>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="DropStates">
                                <VisualState x:Name="NoDrop" />
                                <VisualState x:Name="DropOnto">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                               Storyboard.TargetName="DropOntoElem"
                                                                               Storyboard.TargetProperty="Opacity">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.15"
                                                                          Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
<!--                                <VisualState x:Name="DropBefore">-->
<!--                                    <Storyboard>-->
<!--                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DropBeforeElem"-->
<!--                                                                               Storyboard.TargetProperty="Visibility">-->
<!--                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">-->
<!--                                                <DiscreteObjectKeyFrame.Value>-->
<!--                                                    <Visibility>Visible</Visibility>-->
<!--                                                </DiscreteObjectKeyFrame.Value>-->
<!--                                            </DiscreteObjectKeyFrame>-->
<!--                                        </ObjectAnimationUsingKeyFrames>-->
<!--                                    </Storyboard>-->
<!--                                </VisualState>-->
<!--                                <VisualState x:Name="DropAfter">-->
<!--                                    <Storyboard>-->
<!--                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DropAfterElem"-->
<!--                                                                               Storyboard.TargetProperty="Visibility">-->
<!--                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">-->
<!--                                                <DiscreteObjectKeyFrame.Value>-->
<!--                                                    <Visibility>Visible</Visibility>-->
<!--                                                </DiscreteObjectKeyFrame.Value>-->
<!--                                            </DiscreteObjectKeyFrame>-->
<!--                                        </ObjectAnimationUsingKeyFrames>-->
<!--                                    </Storyboard>-->
<!--                                </VisualState>-->
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="DraggingStates">
                                <VisualState x:Name="NotDragging" />
                                <VisualState x:Name="Dragging">
                                    <Storyboard>
                                        <DoubleAnimation Duration="00:00:00"
                                                                 Storyboard.TargetName="lineControl"
                                                                 Storyboard.TargetProperty="Opacity"
                                                                 To="0" />
                                        <DoubleAnimation Duration="00:00:00"
                                                                 Storyboard.TargetName="LineTerminator"
                                                                 Storyboard.TargetProperty="Opacity"
                                                                 To="0" />
                                        <DoubleAnimation Duration="00:00:00"
                                                                 Storyboard.TargetName="ExpansionIndicator"
                                                                 Storyboard.TargetProperty="Opacity"
                                                                 To="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="main" Margin="0,0,0,1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="5" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="0" />
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="*"/>
                                
                            </Grid.ColumnDefinitions>
                            <igPrim:NodeLineControl Node="{Binding Node}"
                                                              x:Name="lineControl" Grid.Column="1" />
                            <!--<Image Source="../Images/blank.png" Grid.Column="2"/>-->
                            <igPrim:NodeLineTerminator Grid.Column="2"
                                                                 x:Name="LineTerminator"
                                                                 Node="{Binding Node, RelativeSource={RelativeSource TemplatedParent}}" />
                            <igPrim:ExpansionIndicator x:Name="ExpansionIndicator" Panel.ZIndex="9999"
                                                                 IsTabStop="False"
                                                                 Grid.Column="2"
                                                                 Visibility="{Binding Node.HasChildren, Converter={StaticResource BoolToVis}, RelativeSource={RelativeSource TemplatedParent}}"
                                                                 IsExpanded="{Binding Node.IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                                 Style="{StaticResource ExpansionIndicatorStyle1}" />
                            <CheckBox x:Name="Checkbox"
                                              Grid.Column="3"
                                              IsThreeState="{Binding Node.NodeLayout.CheckBoxSettings.IsCheckBoxThreeStateResolved}"
                                              IsTabStop="False"
                                              Visibility="{Binding Node.NodeLayout.CheckBoxSettings.CheckBoxVisibilityResolved}"
                                              IsChecked="{Binding Node.IsChecked, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Center"></CheckBox>
                            <Border x:Name="Bd"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CornerRadius="0" />
                            <Border x:Name="hoverBorder"
                                           Background="{StaticResource BlackOpacity40Brush}"
                                           BorderBrush="{StaticResource BlackOpacity40Brush}"
                                           BorderThickness="{TemplateBinding BorderThickness}"
                                            Visibility="Collapsed"
                                            Grid.Column="0" Grid.ColumnSpan="7"
                                            CornerRadius="0"></Border>
                            <Border x:Name="SelectedBorder"
                                         Background="{StaticResource BlackOpacity40Brush}"
                                                    BorderBrush="#1dabed"
                                                    BorderThickness="3 0 0 0"
                                            Visibility="Collapsed"
                                            Grid.Column="0" Grid.ColumnSpan="7"
                                            CornerRadius="0"></Border>
                            <ContentControl x:Name="ExpandedIcon"
                                                    HorizontalContentAlignment="Center"
                                                    VerticalContentAlignment="Center"
                                                    Visibility="Collapsed"
                                                    Grid.Column="5" />
                            <ContentControl x:Name="CollapsedIcon"
                                                    HorizontalContentAlignment="Center"
                                                    VerticalContentAlignment="Center"
                                                    Visibility="Collapsed"
                                                    Grid.Column="5" />

                            <igPrim:ActiveNodeIndicator x:Name="ActiveBorder"
                                                                  Visibility="Collapsed"
                                                                  Grid.Column="6" />
                            <ContentPresenter x:Name="ContentPresenter" Grid.Column="6" Margin="5,0,0,0"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" >
                                <ContentPresenter.Resources>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Foreground" Value="{Binding Node.Data.NodeColor, RelativeSource={RelativeSource AncestorType=ig:XamDataTreeNodeControl}, Converter={StaticResource ColorConverter}}"/>
                                        <Setter Property="Padding" Value="5 0" />
                                        <!--<Setter Property="Width" Value="235"/>-->
                                        
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>
                        </Grid>
                        <Grid x:Name="DropBeforeElem"
                                      Visibility="Collapsed"
                                      VerticalAlignment="Top"
                                      RenderTransformOrigin="0.5,0.5">
                            <Grid.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform />
                                    <TranslateTransform Y="-3" />
                                </TransformGroup>
                            </Grid.RenderTransform>
                            <Rectangle x:Name="bar"
                                               Fill="{StaticResource DropIndicatorFill}"
                                               Height="1"
                                               StrokeThickness="0" />
                            <Path x:Name="arrowLeft"
                                          Height="7"
                                          Width="6"
                                          Stretch="Fill"
                                          Data="M 166,184 C166,184 166,194 166,194 166,194 171,189 171,189 171,189 166,184 166,184 z"
                                          Fill="{StaticResource DropIndicatorFill}"
                                          HorizontalAlignment="Left" />
                            <Path x:Name="arrowRight"
                                          HorizontalAlignment="Right"
                                          Height="7"
                                          Width="6"
                                          Stretch="Fill"
                                          Data="M 178,194 C178,194 178,184 178,184 178,184 173,189 173,189 173,189 178,194 178,194 z"
                                          Fill="{StaticResource DropIndicatorFill}" />
                        </Grid>
                        <Grid x:Name="DropAfterElem"
                                      Visibility="Collapsed"
                                      VerticalAlignment="Bottom"
                                      RenderTransformOrigin="0.5,0.5">
                            <Grid.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform />
                                    <TranslateTransform Y="4" />
                                </TransformGroup>
                            </Grid.RenderTransform>
                            <Rectangle x:Name="bar1"
                                               Fill="{StaticResource DropIndicatorFill}"
                                               Height="1"
                                               StrokeThickness="0" />
                            <Path x:Name="arrowLeft1"
                                          Height="7"
                                          Width="6"
                                          Stretch="Fill"
                                          Data="M 166,184 C166,184 166,194 166,194 166,194 171,189 171,189 171,189 166,184 166,184 z"
                                          Fill="{StaticResource DropIndicatorFill}"
                                          HorizontalAlignment="Left" />
                            <Path x:Name="arrowRight1"
                                          HorizontalAlignment="Right"
                                          Height="7"
                                          Width="6"
                                          Stretch="Fill"
                                          Data="M 178,194 C178,194 178,184 178,184 178,184 173,189 173,189 173,189 178,194 178,194 z"
                                          Fill="{StaticResource DropIndicatorFill}" />
                        </Grid>
                        <Rectangle x:Name="DropOntoElem"
                                           Opacity="0"
                                           Stroke="{StaticResource ItemSelectedOuterBorderFill}"
                                           StrokeThickness="2"
                                           RadiusX="2"
                                           RadiusY="2" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
    </Style>
<!--    Button metro style-->
    <Style
			x:Key="ButtonFocusVisual">
        <Setter
				Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true"
						           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1"
						           StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--<Style x:Key="SeparatorBorder" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="#434449"></Setter>
        <Setter Property="BorderThickness" Value="0,1,0,0"></Setter>
        <Setter Property="BorderBrush" Value="Black"></Setter>
        <Setter Property="ClipToBounds" Value="True"></Setter>
        <Setter Property="Height" Value="2"></Setter>
    </Style>-->

    <Style x:Key="SeparatorBorder" TargetType="{x:Type Border}">
        <Setter Property="Height" Value="2"></Setter>
        <Setter Property="Width" Value="Auto"></Setter>
        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush ImageSource="../Images/sidebardivider.png"></ImageBrush>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <Style x:Key="SeparatorBorderHeader" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="0,1,0,0"></Setter>
        <Setter Property="BorderBrush" Value="#808189"></Setter>
        <Setter Property="ClipToBounds" Value="True"></Setter>
        <Setter Property="Margin" Value="0 -1 0 0"></Setter>
        
    </Style>
    <Style x:Key="SeparatorBorderHeader_new" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="0,1,0,0"></Setter>
        <!--<Setter Property="BorderBrush" Value="#808189"></Setter>-->
        <Setter Property="ClipToBounds" Value="True"></Setter>
        <Setter Property="Margin" Value="0 -1 0 0"></Setter>
        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush ImageSource="../Images/border_bottom_menu.png"/>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalSeparatorBorder" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0,0,1,0"></Setter>
        <Setter Property="BorderBrush" Value="Black"></Setter>
        <Setter Property="ClipToBounds" Value="True"></Setter>
        <Setter Property="Width" Value="2"></Setter>
    </Style>
    <Style x:Key="MetroButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource TextDefaultColorBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10 5" />
        <Setter Property="Margin" Value="0 0 5 0"/>
        <Setter Property="FontSize" Value="11" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Typography.Capitals" Value="AllSmallCaps"></Setter>
        <!--<Setter Property="FontFamily" Value="{DynamicResource ResourceKey=Myraidproregular}" ></Setter>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#33000000"/>
                            <Setter Property="Foreground" Value="#FFF" />
                            <Setter Property="Cursor" Value="Hand" />
                            <Setter Property="BorderThickness" Value="2 0 0 0"></Setter>
                            <Setter Property="BorderBrush" Value="#1dabed" ></Setter>


                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#525963" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LDAPButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource textblockColorCodeBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="12 10" />
        <Setter Property="Height" Value="32" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="BorderThickness" Value="1 0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Typography.Capitals" Value="AllSmallCaps" />
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=Myraidproregular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Foreground" Value="#D2D2D3" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

        
    <Style x:Key="NetworkButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#8e8f98" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="3 10" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        
                        <ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource accentColorBrush}"/>
                            <Setter Property="Foreground" Value="#D2D2D3" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NetworkButtonPushed" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#FFFFFFFF" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="3 10" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="BorderThickness" Value="0" />        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Polygon Points="0,0 8,8,0,16" Stroke="#1dabed" Fill="#1dabed" VerticalAlignment="Center" />
                        <ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								RecognizesAccessKey="True" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="HeaderTitle" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=Myraidproregular}" />
        <Setter Property="FontSize" Value="24" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Foreground" Value="#FFF" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <!--<Setter Property="Typography.CapitalSpacing" Value="True" />-->
        <!--<Setter Property="Typography.NumeralStyle" Value="OldStyle" />-->
    </Style>
    
    <Style x:Key="MenuImportButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#28272d" />
        <Setter Property="Foreground" Value="{StaticResource TextDefaultColorBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10 5" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#28272d"/>
                            <Setter Property="Foreground" Value="#ADADAD" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MenuButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource TextDefaultColorBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
        <Setter Property="Padding" Value="5 30 5 28" />
        <Setter Property="Margin" Value="0 0 35 0" />
        <Setter Property="Height" Value="85" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Right"></Setter>
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=Myraidproregular}" ></Setter>
        <Setter Property="Typography.Capitals" Value="AllSmallCaps"></Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Foreground" Value="#D2D2D3" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                            <Setter Property="BorderThickness" Value="0 0 0 0"/>
                            <Setter Property="BorderBrush" Value="#1dabed"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MenuButtonHover" TargetType="{x:Type Button}">
        <!--<Setter Property="Background" Value="{StaticResource backgroundColorBrush}" />-->
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
        <Setter Property="Padding" Value="5 30" />
        <Setter Property="Height" Value="85" />
        <Setter Property="Margin" Value="0 0 25 0" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="BorderBrush" Value="#1dabed" />
        <Setter Property="Typography.Capitals" Value="AllSmallCaps"></Setter>
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=Myraidproregular}" ></Setter>
        <Setter Property="BorderThickness" Value="0 0 0 3" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Foreground" Value="#D2D2D3" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ScaleTransform x:Key="FontStretchCondensed" ScaleX="0.8" />
    <ScaleTransform x:Key="FontStretchExpanded" ScaleX="1.2" />
    
    <Style TargetType="{x:Type TextBlock}" x:Key="leftMainNavTextBlock">
        <Setter Property="Typography.Capitals" Value="AllSmallCaps"></Setter>
        <Setter Property="Margin" Value="5,0,5,0"></Setter>
        <Setter Property="TextAlignment" Value="Center"></Setter>
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Typography.CapitalSpacing" Value="True"/>
        <Setter Property="FontStretch" Value="ExtraExpanded"/>
        <Setter Property="Typography.CaseSensitiveForms" Value="True"/>
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=Myraidproregular}" ></Setter>
    </Style>
    <Style x:Key="leftNavTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource TextDefaultColorBrush}" />
    </Style>
    <Style x:Key="SubMenuButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#66000000" />
        <Setter Property="Foreground" Value="{StaticResource TextDefaultColorBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="47 5 0 5" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Height" Value="36" />
        <Setter Property="Width" Value="235" />
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=Myraidproregular}" ></Setter>
        <!--<Setter Property="LayoutTransform" Value="{StaticResource FontStretchExpanded}" />-->
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#33000000"/>
                            <Setter Property="Foreground" Value="#D2D2D3" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="submenu_shaodw" TargetType="{x:Type Border}">
        <Setter Property="Width" Value="235"></Setter>
        <Setter Property="Background" >
            <Setter.Value>
                <ImageBrush ImageSource="../Images/Shader.png" />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TabPageButton" TargetType="{x:Type Button}">
        <Setter Property="Background" >
            <Setter.Value>
                <ImageBrush ImageSource="../Images/directory_button_up.png"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{StaticResource TextDefaultColorBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0 0" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PushedTabPageButton" TargetType="{x:Type Button}">
        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush ImageSource="../Images/directory_button_down.png"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Typography.Capitals" Value="AllSmallCaps"></Setter>
        <Setter Property="Foreground" Value="{StaticResource TextDefaultColorBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0 0" />
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="FontSize" Value="12" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=Myraidproregular}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SearchButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#545358" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0 0 10 0" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="BorderBrush" Value="#99FFFFFF" />
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#254A50"/>
                            <Setter Property="Foreground" Value="White" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SearchTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="15 10" />
        <Setter Property="FontSize" Value="13" />
        <!--<Setter Property="FontWeight" Value="Bold" />-->
        <Setter Property="Foreground" Value="White" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <!--<Setter Property="FontStyle" Value="Italic" />-->
        <Setter Property="Height" Value="40" />
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderBrush" Value="#77FFFFFF" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle SnapsToDevicePixels="true"
							           Margin="0"
							           Stroke="Black"
							           StrokeDashArray="1 2"
							           StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderDownHeaderStyle"
		       TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid SnapsToDevicePixels="False"
							      Background="Transparent">
                            <ContentPresenter SnapsToDevicePixels="True"
								                  HorizontalAlignment="Left"
								                  VerticalAlignment="Center"
								                  RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderRightHeaderStyle"
		       TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid SnapsToDevicePixels="False"
							      Background="Transparent">
                            <ContentPresenter SnapsToDevicePixels="True"
								                  HorizontalAlignment="Center"
								                  VerticalAlignment="Top"
								                  RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle"
		       TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid SnapsToDevicePixels="False"
							      Background="Transparent">
                            <ContentPresenter SnapsToDevicePixels="True"
								                  HorizontalAlignment="Left"
								                  VerticalAlignment="Center"
								                  RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle"
		       TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid SnapsToDevicePixels="False"
							      Background="Transparent">
                            <ContentPresenter SnapsToDevicePixels="True"
								                  HorizontalAlignment="Center"
								                  VerticalAlignment="Top"
								                  RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ArrowlessExpanderTemplate"
		       TargetType="{x:Type Expander}">
        <Setter Property="Foreground"
			        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background"
			        Value="Transparent" />
        <Setter Property="HorizontalContentAlignment"
			        Value="Stretch" />
        <Setter Property="VerticalContentAlignment"
			        Value="Stretch" />
        <Setter Property="BorderBrush"
			        Value="Black" />
        <Setter Property="BorderThickness"
			        Value="0,0,0,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border SnapsToDevicePixels="true"
						        Background="{TemplateBinding Background}"
						        BorderBrush="{TemplateBinding BorderBrush}"
						        BorderThickness="{TemplateBinding BorderThickness}">
                        <DockPanel>
                            <ToggleButton FontFamily="{TemplateBinding FontFamily}"
								              FontSize="{TemplateBinding FontSize}"
								              FontStretch="{TemplateBinding FontStretch}"
								              FontStyle="{TemplateBinding FontStyle}"
								              FontWeight="{TemplateBinding FontWeight}"
								              Foreground="{TemplateBinding Foreground}"
								              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								              Padding="{TemplateBinding Padding}"
								              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								              Margin="1"
								              MinHeight="0"
								              MinWidth="0"
								              x:Name="HeaderSite"
								              Style="{StaticResource ExpanderDownHeaderStyle}"
								              Content="{TemplateBinding Header}"
								              ContentTemplate="{TemplateBinding HeaderTemplate}"
								              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
								              DockPanel.Dock="Top"
								              IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                            <ContentPresenter Focusable="false"
								                  Visibility="Collapsed"
								                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								                  Margin="{TemplateBinding Padding}"
								                  x:Name="ExpandSite"
								                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								                  DockPanel.Dock="Bottom" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
							         Value="true">
                            <Setter Property="Visibility"
								        TargetName="ExpandSite"
								        Value="Visible" />
                            <Setter Property="Background"
								        Value="#254A50" />
                        </Trigger>
                        <Trigger Property="ExpandDirection"
							         Value="Right">
                            <Setter Property="DockPanel.Dock"
								        TargetName="ExpandSite"
								        Value="Right" />
                            <Setter Property="DockPanel.Dock"
								        TargetName="HeaderSite"
								        Value="Left" />
                            <Setter Property="Style"
								        TargetName="HeaderSite"
								        Value="{StaticResource ExpanderRightHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection"
							         Value="Up">
                            <Setter Property="DockPanel.Dock"
								        TargetName="ExpandSite"
								        Value="Top" />
                            <Setter Property="DockPanel.Dock"
								        TargetName="HeaderSite"
								        Value="Bottom" />
                            <Setter Property="Style"
								        TargetName="HeaderSite"
								        Value="{StaticResource ExpanderUpHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection"
							         Value="Left">
                            <Setter Property="DockPanel.Dock"
								        TargetName="ExpandSite"
								        Value="Left" />
                            <Setter Property="DockPanel.Dock"
								        TargetName="HeaderSite"
								        Value="Right" />
                            <Setter Property="Style"
								        TargetName="HeaderSite"
								        Value="{StaticResource ExpanderLeftHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
							         Value="false">
                            <Setter Property="Foreground"
								        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
							         Value="True">
                            <Setter Property="Background"
								        Value="#254A50" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
<!--Animation hidden or visible-->
    <Style TargetType="FrameworkElement" x:Key="SubEndpointVisibleAnimation">
        <Style.Triggers>
            <Trigger Property="Opacity" Value="1">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Height"
                             From="0" To="108" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Height"
                             From="108" To="0" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="Opacity" Value="0.99">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Height"
                             From="108" To="0" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Height"
                             From="0" To="108" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="FrameworkElement" x:Key="SubDiscoveryVisibleAnimation">
        <Style.Triggers>
            <Trigger Property="Opacity" Value="1">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Height"
                             From="0" To="72" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Height"
                             From="72" To="0" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="Opacity" Value="0.99">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Height"
                             From="72" To="0" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Height"
                             From="0" To="72" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>

    </Style>
    <Storyboard x:Key="SbShowLeftMenu">
        <DoubleAnimation Storyboard.TargetProperty="Height" From="0" To="36" Duration="0:0:0.4" />
    </Storyboard>
    <Storyboard x:Key="SbHideLeftMenu">
        <DoubleAnimation Storyboard.TargetProperty="Height" From="36" To="0" Duration="0:0:0.4" />
    </Storyboard>
    
<!--    Checkbox style  -->
    <Style TargetType="CheckBox" x:Key="CheckBoxImage">
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Content" Value=""></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid>
                        <Image x:Name="UnCheck" Source="../Images/chb_uncheck.png" Width="21"></Image>
                        <Image x:Name="Check" Source="../Images/chb_check.png" Width="21"></Image>
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="UnCheck" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="UnCheck" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Check" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--ContextMenu Style-->
    <SolidColorBrush x:Key="BodyBackgroundBrush" Color="Green"/>
    <SolidColorBrush x:Key="SolidBorderBrush" Color="Black"/>
    <SolidColorBrush x:Key="DataGridMouseHoverColor" Color="Red"/>
    <Style x:Key="MetroContextMenu" TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
        <Setter Property="HasDropShadow" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Name="Border" 
                  Background="{StaticResource MetroBackgroundButton}" 
                  BorderBrush="{StaticResource SolidBorderBrush}" 
                  BorderThickness="1" >
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="CornerRadius" Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource DataGridMouseHoverColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MetroMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="Padding" Value="0,10"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Background" Value="{StaticResource MetroBackgroundButton}"/>
        <!--<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Button Style="{StaticResource MenuButton}" Command="{TemplateBinding Command}" Content="{TemplateBinding Header}" Width="{TemplateBinding Width}" Height="30"></Button>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource DataGridMouseHoverColor}"/>
                <Setter Property="Cursor" Value="Hand"></Setter>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" Value="{StaticResource DataGridMouseHoverColor}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="LightGray"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BorderMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border Background="#434449" BorderThickness="0,1,0,0" BorderBrush="Black" ClipToBounds="True" Height="2">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LinkButton" TargetType="{x:Type Button}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="25 0 0 0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <TextBlock
                    Text="{TemplateBinding Property=ContentControl.Content}"
                    Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BrowseButton" TargetType="{x:Type Button}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="#331daaed"/>
        <Setter Property="Foreground" Value="#1dabed" />
        <!--<Setter Property="Padding" Value="10 5" />-->
        <Setter Property="Width" Value="95" />
        <Setter Property="Height" Value="30"/>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowColor}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource WindowButtonOverColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource WindowButtonPressedColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BtnHover" TargetType="{x:Type Button}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource TextDefaultColorBrush}" />
        <Setter Property="Width" Value="95" />
        <Setter Property="Height" Value="30"/>
        <Setter Property="Padding" Value="30 10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowColor}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource WindowButtonOverColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource WindowButtonPressedColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ImageButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource TextDefaultColorBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10 5" />
        <!--<Setter Property="Margin" Value="0 0 5 0"/>-->
        <Setter Property="FontSize" Value="11" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Typography.Capitals" Value="AllSmallCaps"></Setter>
        <!--<Setter Property="FontFamily" Value="{DynamicResource ResourceKey=Myraidproregular}" ></Setter>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#33000000"/>
                            <Setter Property="Foreground" Value="#FFF" />
                            <Setter Property="Cursor" Value="Hand" />
                            <Setter Property="BorderThickness" Value="0"></Setter>
                            <Setter Property="BorderBrush" Value="#1dabed" ></Setter>


                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#525963" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Custom style Progress bar-->
    <Style TargetType="{x:Type ProgressBar}" x:Key="ProgressBarStyle">
        <Setter Property="Foreground" Value="#274B51"></Setter>
        <Setter Property="Background" Value="#787878"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Margin="1">
                        <Rectangle x:Name="opacityMask" RadiusX="7" RadiusY="7" Fill="{TemplateBinding Background}" Margin="0" />
                        <Grid Margin="-1">
                            <Grid.OpacityMask>
                                <VisualBrush Visual="{Binding ElementName=opacityMask}" />
                            </Grid.OpacityMask>
                            <Rectangle x:Name="PART_Track" RadiusX="{Binding ElementName=opacityMask, Path=RadiusX}" RadiusY="{Binding ElementName=opacityMask, Path=RadiusY}"  StrokeThickness="1" Fill="{TemplateBinding Background}" />
                            <Rectangle x:Name="PART_Indicator" RadiusX="{Binding ElementName=opacityMask, Path=RadiusX}" RadiusY="{Binding ElementName=opacityMask}"  StrokeThickness="1" HorizontalAlignment="Left" Fill="{TemplateBinding Foreground}" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Server Page-->
    <Style TargetType="{x:Type StackPanel}" x:Key="serviceListstyle">
        <Setter Property="Background" Value="#08FFFFFF"></Setter>
        <Setter Property="Height" Value="160" />
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
    </Style>

    <Style TargetType="{x:Type StackPanel}" x:Key="serviceListLeft">
        <Setter Property="Background" Value="#66000000"></Setter>
        <Setter Property="Height" Value="160" />
        <Setter Property="Orientation" Value="Vertical"></Setter>
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
        <Setter Property="Typography.Capitals" Value="AllSmallCaps"></Setter>
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="serviceListLeftText">
        <Setter Property="TextAlignment" Value="Center"></Setter>
        <Setter Property="FontSize" Value="15"></Setter>
        <Setter Property="Margin" Value="0 20 0 0"></Setter>
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=Myraidproregular}"></Setter>
    </Style>
    <Style TargetType="{x:Type Image}" x:Key="serviceListLeftImage">
        <!--<Setter Property="Width" Value="84"></Setter>
        <Setter Property="Height" Value="84"></Setter>-->
        <Setter Property="Margin" Value="0 15 0 20"></Setter>
    </Style>
    
    <Style TargetType="{x:Type TextBlock}" x:Key="service_content">
        <Setter Property="Margin" Value="0 0 0 15"></Setter>
        <Setter Property="Foreground" Value="#8e8f98"></Setter>
        <Setter Property="FontSize" Value="12"></Setter>
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=OpenSansRegular}"></Setter>
    </Style>
    <Style TargetType="{x:Type TextBlock}" x:Key="service_info">
        <Setter Property="Margin" Value="30,0,0,0"></Setter>
        <Setter Property="Foreground" Value="#FFF"></Setter>
        <Setter Property="TextAlignment" Value="Left"></Setter>
        <Setter Property="FontSize" Value="12"></Setter>
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=OpenSansRegular}"></Setter>
        <Setter Property="TextWrapping" Value="Wrap"></Setter>
    </Style>
    

    <!--all capital letters-->
    <Style TargetType="{x:Type TextBlock}" x:Key="textincaps">
        <Setter Property="Typography.Capitals" Value="AllSmallCaps"></Setter>
    </Style>
    
    <!-- Plus button Design for Label and Assignment page -->
    <Style TargetType="{x:Type Button}" x:Key="plusButton">
        <Setter Property="FontSize" Value="25" />
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Foreground" Value="#1FFFFFFF" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0,0,10,0" />
        <Setter Property="Background" Value="#33000000" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowColor}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource WindowButtonOverColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource WindowButtonPressedColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Minus button Design for Label and Assignment page -->
    <Style TargetType="{x:Type Button}" x:Key="minusButton">
        <Setter Property="FontSize" Value="25" />
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Foreground" Value="#1FFFFFFF" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0,0,5,0" />
        <Setter Property="Background" Value="#33000000" />
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowColor}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource WindowButtonOverColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource WindowButtonPressedColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TextBlock}" x:Key="plusMinusButtonText">
        <Setter Property="FontSize" Value="25" />
        <Setter Property="Margin" Value="0 -3 0 0" />
    </Style>

    <!--confirm popup design-->
    <Style x:Key="dialogTitle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Typography.Capitals" Value="AllSmallCaps"></Setter>
        <Setter Property="Foreground" Value="#FFF" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=Myraidproregular}"></Setter>
        <Setter Property="Margin" Value="10 0 0 0"/>
    </Style>
    <Style x:Key="confirmbtns" TargetType="{x:Type Button}">
        <!--<Setter Property="Background" Value="#2E2F33" />-->
        <Setter Property="Background" Value="#1A7c7d82" />
        <Setter Property="Foreground" Value="#a1a3a7" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10 5" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="BorderBrush" Value="#66000000" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="100" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Typography.Capitals" Value="AllSmallCaps"></Setter>
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=OpenSansRegular}"></Setter>
        <!--<Setter Property="FontWeight" Value="Bold"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								Margin="{TemplateBinding Padding}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#33000000"/>
                            <Setter Property="Foreground" Value="#FFF" />
                            <Setter Property="Cursor" Value="Hand" />
                            <!--<Setter Property="BorderThickness" Value="2 0 0 0"></Setter>
                            <Setter Property="BorderBrush" Value="#1dabed" ></Setter>-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#525963" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="confirmtext" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="white" />
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=OpenSansRegular}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="MaxWidth" Value="180" />
        <Setter Property="Margin" Value="40 10" />
        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <Style TargetType="{x:Type Grid}" x:Key="bggray3">
        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush ImageSource="../Images/bg.png"/>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="main_source_right_border" TargetType="{x:Type Border}">
        <Setter Property="ClipToBounds" Value="True"></Setter>
        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush ImageSource="../Images/shadow_main_source.png"/>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--right sidebar- top border-->
    <!--<Style x:Key="black_right_top_border" TargetType="{x:Type Border}">
        <Setter Property="ClipToBounds" Value="True"></Setter>
        <Setter Property="Height" Value="2"></Setter>
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush ImageSource="../Images/rightsidebar_topline.png"/>
            </Setter.Value>
        </Setter>
    </Style>-->

    <!--textblock right side policies page-->
    <Style x:Key="policies_text_block" TargetType="{x:Type TextBox}">
        <Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
        <Setter Property="Height" Value="31" />
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Foreground" Value="#FFFFFFFF"></Setter>
        <Setter Property="FontSize" Value="10"></Setter>
        <Setter Property="Padding" Value="7"></Setter>
    </Style>
    
    <!-- policies page right side labels -->
    <Style x:Key="policies_right_side_label" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="#FFFFFFFF"></Setter>
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="Padding" Value="0 7" />
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=OpenSansRegular}" />
    </Style>

    <!--policies page - right side textblock image (yellow)-->
    <Style x:Key="policies_textblock_image" TargetType="{x:Type Image}">
        <Setter Property="HorizontalAlignment" Value="Right"></Setter>
        <Setter Property="Width" Value="15"></Setter>
        <Setter Property="Height" Value="15" />
    </Style>

    <!-- simulation -->
    <Style x:Key="simulation_title" TargetType="{x:Type TextBlock}">
        <Setter Property="Typography.Capitals" Value="AllSmallCaps"></Setter>
        <Setter Property="Visibility" Value="Visible"></Setter>
        <Setter Property="Margin" Value="30 30 10 0" />
    </Style>
    
    <!--<Application.Resources>
        <ScaleTransform x:Key="FontStretchCondensed" ScaleX="0.8" />
        <ScaleTransform x:Key="FontStretchExpanded" ScaleX="1.2" />
    </Application.Resources>-->

    <!-- united agent(static text) - policies page -->
    <Style x:Key="updateheading" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Foreground" Value="#fff"></Setter>
        <Setter Property="Margin" Value="0 15 0 0"></Setter>
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=Myraidproregular}"></Setter>
    </Style>

    <!-- add/edit/ dialogbox of software page -->
    <Style x:Key="add_edit_dialog" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="Foreground" Value="White" ></Setter>
        <Setter Property="Padding" Value="5 3 0 0" ></Setter>
        <Setter Property="FontSize" Value="11" ></Setter>
        <Setter Property="FontFamily" Value="{DynamicResource ResourceKey=OpenSansRegular}"></Setter>
    </Style>
    
    
</ResourceDictionary>

  

