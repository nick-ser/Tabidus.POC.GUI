<UserControl x:Class="Tabidus.POC.GUI.UserControls.Task.TaskItemElement"
			 xmlns:ig="http://schemas.infragistics.com/xaml"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
			 xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
			 xmlns:local="clr-namespace:Tabidus.POC.GUI.UserControls.Task"
			 xmlns:task="clr-namespace:Tabidus.POC.GUI.ViewModel.Task"
			 xmlns:common="clr-namespace:Tabidus.POC.GUI.Common"
			 mc:Ignorable="d" 
			 x:Name="taskItemControl"
			 d:DesignHeight="300" d:DesignWidth="600">
	<UserControl.Resources>
		<common:InvertBoolConverter x:Key="InvertBoolConverter"/>
		<ControlTemplate x:Key="ExpanderToggleButtonDirAssignment"
				 TargetType="{x:Type ToggleButton}">
			<Border x:Name="Border"
		  CornerRadius="0"
		  BorderThickness="0" Background="{Binding ExpanderBackgroundColor}">
				<VisualStateManager.VisualStateGroups>
					<VisualStateGroup x:Name="CommonStates">
						<VisualState x:Name="Normal" />
						<VisualState x:Name="MouseOver"/>
						<VisualState x:Name="Pressed" />
						<VisualState x:Name="Disabled">
							<Storyboard>
								<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
										  Storyboard.TargetProperty="(Panel.Background).
				(GradientBrush.GradientStops)[1].(GradientStop.Color)">
									<EasingColorKeyFrame KeyTime="0"
								   Value="{StaticResource ControlLightColor}" />
								</ColorAnimationUsingKeyFrames>
								<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
										  Storyboard.TargetProperty="(Border.BorderBrush).
				(GradientBrush.GradientStops)[1].(GradientStop.Color)">
									<EasingColorKeyFrame KeyTime="0"
								   Value="{StaticResource ControlLightColor}" />
								</ColorAnimationUsingKeyFrames>
							</Storyboard>
						</VisualState>
					</VisualStateGroup>
					<VisualStateGroup x:Name="CheckStates">
						<VisualState x:Name="Checked">
							<Storyboard>
								<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
										   Storyboard.TargetName="CollapsedArrow">
									<DiscreteObjectKeyFrame KeyTime="0"
									  Value="{x:Static Visibility.Hidden}" />
								</ObjectAnimationUsingKeyFrames>
								<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
										   Storyboard.TargetName="ExpandededArrow">
									<DiscreteObjectKeyFrame KeyTime="0"
									  Value="{x:Static Visibility.Visible}" />
								</ObjectAnimationUsingKeyFrames>
							</Storyboard>
						</VisualState>
						<VisualState x:Name="Unchecked" />
						<VisualState x:Name="Indeterminate" />
					</VisualStateGroup>
				</VisualStateManager.VisualStateGroups>
				<Grid>
					<Image x:Name="CollapsedArrow" Width="14" Source="{Binding IsActived, Converter={StaticResource CollapsedImageConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center"></Image>
					<Image x:Name="ExpandededArrow" Width="14" Source="{Binding IsActived, Converter={StaticResource ExpandedImageConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"></Image>
				</Grid>
			</Border>
		</ControlTemplate>
		<Style TargetType="{x:Type Expander}">
			<Setter Property="Foreground" Value="{StaticResource TextblockLabelBrush}"></Setter>
			<Setter Property="Margin" Value="0,10,0,0"></Setter>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Expander}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition x:Name="ContentRow"
						   Height="0" />
							</Grid.RowDefinitions>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal" />
									<VisualState x:Name="Disabled">
										<Storyboard>
											<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
												Storyboard.TargetProperty="(Panel.Background).
					  (GradientBrush.GradientStops)[1].(GradientStop.Color)">
												<EasingColorKeyFrame KeyTime="0"
										 Value="{StaticResource ControlLightColor}" />
											</ColorAnimationUsingKeyFrames>
											<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
												Storyboard.TargetProperty="(Border.BorderBrush).
					  (GradientBrush.GradientStops)[1].(GradientStop.Color)">
												<EasingColorKeyFrame KeyTime="0"
										 Value="{StaticResource ControlLightColor}" />
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<Border x:Name="Border"
				  Grid.Row="0"
				  BorderThickness="0"
				  CornerRadius="0" Background="{Binding ExpanderBackgroundColor}" Height="45">
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="40" />
										<ColumnDefinition Width="40" />
										<ColumnDefinition Width="*" />
										<ColumnDefinition Width="200" />
										<ColumnDefinition Width="100" />
										<ColumnDefinition Width="40" />
									</Grid.ColumnDefinitions>
									<!--Row 1: Expand collapse-->
									<ToggleButton x:Name="ToggleButton" OverridesDefaultStyle="True"
							Template="{StaticResource ExpanderToggleButtonDirAssignment}"
							IsChecked="{Binding IsExpanded, Mode=TwoWay, 
				  RelativeSource={RelativeSource TemplatedParent}}">
										<ToggleButton.Background>
											<LinearGradientBrush EndPoint="0.5,1"
									   StartPoint="0.5,0">
												<GradientStop Color="{Binding ExpanderBackgroundColor}"
								  Offset="0" />
												<GradientStop Color="{Binding ExpanderBackgroundColor}"
								  Offset="1" />
											</LinearGradientBrush>
										</ToggleButton.Background>
									</ToggleButton>
									<!--Row 2: Image icon-->
									<Image Grid.Column="1" Source="../../Images/cdlarge_icon.png" Margin="4"></Image>
									<!--Row 3: Header text-->
									<Button x:Name="BtnExpandHeader" Grid.Column="2" Content="{Binding Header,RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpanHeaderButton}" Visibility="{Binding IsNotAddState, Converter={StaticResource BoolToVisConverter}}" Foreground="{Binding TextColor}" Click="Expander_OnExpanded"></Button>
									<TextBox x:Name="TbExpandHeader" Grid.Column="2" MaxLength="200" Text="{Binding Header,RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" Height="25" FontSize="14" VerticalContentAlignment="Center" VerticalAlignment="Center" Visibility="{Binding IsAddState, Converter={StaticResource BoolToVisConverter}}"></TextBox>
									<!--Row 4: Checkbox Inherited from-->
									<CheckBox Grid.Column="3" VerticalAlignment="Center" IsChecked="{Binding CanInheritFrom}" 
											  Command="{Binding InheritFromCommand}"
											  Foreground="{Binding TextColor}"
											  CommandParameter="{Binding IsChecked,RelativeSource={RelativeSource Self}}">
										<CheckBox.ContentTemplate>
											<DataTemplate>
												<StackPanel Orientation="Horizontal" Margin="4 0">
													<TextBlock Text="Inherited from: "></TextBlock>
													<TextBlock Text="{Binding DataContext.InheritFromName,ElementName=taskItemControl}" FontWeight="Bold"></TextBlock>
												</StackPanel>
											</DataTemplate>
										</CheckBox.ContentTemplate>
									</CheckBox>
									<!--Row 5: Checkbox Enabled-->
									<CheckBox Grid.Column="4" VerticalAlignment="Center" IsEnabled="{Binding CanInheritFrom,Converter={StaticResource InvertBoolConverter}}" IsChecked="{Binding IsEnabled}" Foreground="{Binding TextColor}"
											  Command="{Binding EnabledCommand}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}">
										<CheckBox.Style>
											<Style TargetType="CheckBox">
												<Setter Property="FontWeight" Value="Bold"></Setter>
												<Style.Triggers>
													<Trigger Property="IsChecked" Value="True">
														<Setter Property="ContentTemplate">
															<Setter.Value>
																<DataTemplate>
																	<StackPanel Orientation="Horizontal" Margin="4 0">
																		<TextBlock Text="ENABLED" Foreground="#4CA374"></TextBlock>
																	</StackPanel>
																</DataTemplate>
															</Setter.Value>
														</Setter>
													</Trigger>
													<Trigger Property="IsChecked" Value="False">
														<Setter Property="ContentTemplate">
															<Setter.Value>
																<DataTemplate>
																	<StackPanel Orientation="Horizontal" Margin="4 0">
																		<TextBlock Text="DISABLED" Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor,AncestorType=CheckBox}}"></TextBlock>
																	</StackPanel>
																</DataTemplate>
															</Setter.Value>
														</Setter>
													</Trigger>
												</Style.Triggers>
											</Style>
										</CheckBox.Style>
									</CheckBox>
									<!--Row 6: Delete task-->
									<Button Grid.Column="5" Width="20" Height="20" Margin="10,0,10,0" Style="{StaticResource ImageButton}" Command="{Binding DeleteTaskCommand}" ToolTip="Delete rule">
										<Button.Content>
											<Image Width="20" Source="{Binding DeleteImagePath}"></Image>
										</Button.Content>
									</Button>
								</Grid>
							</Border>
							<Border x:Name="Content"
				  Grid.Row="1"
				  BorderThickness="0"
				  CornerRadius="0">
								<ContentPresenter Margin="30,0,0,0" />
							</Border>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsExpanded"
				   Value="True">
								<Setter TargetName="ContentRow"
					Property="Height"
					Value="{Binding DesiredHeight, ElementName=Content}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<DataTemplate DataType="task:TaskItemViewModel">
			
		</DataTemplate>
	</UserControl.Resources>
	<Expander x:Name="Expander" Header="{Binding Name}">
		<Grid Background="{StaticResource LabelCriteriaBackgroundColorBrush}">
			<Grid.Resources>
				<Style TargetType="TextBlock">
					<Setter Property="HorizontalAlignment" Value="Left" />
					<Setter Property="VerticalAlignment" Value="Center" />
					<Setter Property="FontSize" Value="12" />
				</Style>
				<Style TargetType="CheckBox">
					<Setter Property="HorizontalAlignment" Value="Center" />
					<Setter Property="VerticalAlignment" Value="Center" />
				</Style>
				<ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
					<Border x:Name="PART_ContentHost" Focusable="True" />
				</ControlTemplate>
				<Style x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="ToggleButton">
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="22" />
										<ColumnDefinition />
									</Grid.ColumnDefinitions>
									<Border
										x:Name="Border"
										Grid.ColumnSpan="2"
										CornerRadius="0"
										Background="{TemplateBinding Background}"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="2" />
									<Border
										Grid.Column="0"
										CornerRadius="0"
										Background="Transparent"
										BorderBrush="Transparent"
										BorderThickness="10" />
									<Path
										x:Name="Arrow"
										Grid.Column="0"
										Fill="{TemplateBinding Foreground}"
										Stroke="{TemplateBinding Foreground}"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Data="M 0 0 L 5 9 L 10 0 Z" />
								</Grid>
								<ControlTemplate.Triggers>
									<Trigger Property="IsEnabled" Value="False">
										<Setter TargetName="Border" Property="Background" Value="LightGray" />
										<Setter TargetName="Border" Property="BorderThickness" Value="0" />
										<Setter TargetName="Border" Property="Margin" Value="0,1"></Setter>
										<Setter Property="Foreground"
												Value="{StaticResource textblockColorCodeBrush}" />
										<Setter TargetName="Arrow" Property="Fill" Value="Gray" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>

				<Style TargetType="{x:Type ComboBox}">
					<Setter Property="Foreground"
							Value="{StaticResource textblockColorCodeBrush}" />
					<Setter Property="Background" Value="{StaticResource ControlLightColorBrush}" />
					<Setter Property="SnapsToDevicePixels" Value="true" />
					<Setter Property="OverridesDefaultStyle" Value="true" />
					<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
					<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
					<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
					<Setter Property="FontSize" Value="12" />
					<Setter Property="MinWidth" Value="100" />
					<Setter Property="Height" Value="25" />
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="ComboBox">
								<Grid>
									<ToggleButton
										Name="ToggleButton"
										BorderBrush="{TemplateBinding BorderBrush}"
										Background="{TemplateBinding Background}"
										Foreground="{TemplateBinding Foreground}"
										Style="{StaticResource ComboBoxToggleButton}"
										Grid.Column="2"
										Focusable="false"
										IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
										ClickMode="Press" />
									<ContentPresenter
										Name="ContentSite"
										IsHitTestVisible="False"
										Content="{TemplateBinding SelectionBoxItem}"
										ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
										ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
										Margin="22,3,3,3"
										VerticalAlignment="Center"
										HorizontalAlignment="Left" />
									<TextBox x:Name="PART_EditableTextBox"
											 Style="{x:Null}"
											 Template="{StaticResource ComboBoxTextBox}"
											 HorizontalAlignment="Center"
											 VerticalAlignment="Center"
											 Margin="3,3,23,3"
											 Focusable="True"
											 Visibility="Hidden"
											 IsReadOnly="{TemplateBinding IsReadOnly}" />
									<Popup
										Name="Popup"
										Placement="Bottom"
										IsOpen="{TemplateBinding IsDropDownOpen}"
										AllowsTransparency="True"
										Focusable="False"
										PopupAnimation="Slide">
										<Grid
											Name="DropDown"
											SnapsToDevicePixels="True"
											MinWidth="{TemplateBinding ActualWidth}"
											MaxHeight="{TemplateBinding MaxDropDownHeight}">
											<Border
												x:Name="DropDownBorder"
												Background="White"
												BorderThickness="1"
												BorderBrush="{TemplateBinding Foreground}" />
											<ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
												<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
											</ScrollViewer>
										</Grid>
									</Popup>

								</Grid>
								<ControlTemplate.Triggers>
									<Trigger Property="HasItems" Value="false">
										<Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
									</Trigger>
									<Trigger Property="IsGrouping" Value="true">
										<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
									</Trigger>
									<Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
										<Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
										<Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
									</Trigger>
									<Trigger Property="IsEditable" Value="true">
										<Setter Property="IsTabStop" Value="false" />
										<Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
										<Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
									</Trigger>
									<Trigger Property="IsEnabled" Value="False">
										<Setter Property="BorderThickness" Value="0" />
										<Setter Property="Background" Value="#C6CCD8" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
				<Style TargetType="TextBox">
					<Setter Property="Height" Value="22" />
					<Setter Property="FontSize" Value="12" />
					<Setter Property="Foreground" Value="{StaticResource textblockColorCodeBrush}" />
				</Style>
			</Grid.Resources>

			<Grid Margin="8">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="350"/>
					<ColumnDefinition Width="*"/>
				</Grid.ColumnDefinitions>
				<Grid.RowDefinitions>
					<RowDefinition Height="30"/>
					<RowDefinition Height="120"/>
					<RowDefinition Height="30"/>
					<RowDefinition Height="30"/>
					<RowDefinition Height="30"/>
				</Grid.RowDefinitions>
				<!--Column 1-->
				<!--Row 1-->
				<TextBlock Text="Select installation packages:"></TextBlock>
				<!--Row 2: Software package items-->
				<local:InstallationPackagesControl Grid.Row="1" DataContext="{Binding InstallationPackagesViewModel}"
												   CanEdit="{Binding DataContext.CanInheritFrom,Converter={StaticResource InvertBoolConverter},ElementName=taskItemControl}"/>
				<!--Row 3-->
				<TextBlock Text="Scheduling options:" Grid.Row="2"></TextBlock>
				<!--Row 4-->
				<StackPanel Orientation="Horizontal" Grid.Row="3">
					<CheckBox Content="Run every" IsChecked="{Binding CanRunEveryMinutes}"
							  Command="{Binding SaveCommand}"
							  Foreground="#525963"
							  IsEnabled="{Binding CanInheritFrom,Converter={StaticResource InvertBoolConverter}}"></CheckBox>
					<TextBox Text="{Binding RunEveryMinutes, TargetNullValue='',UpdateSourceTrigger=PropertyChanged}" Width="32" Margin="4 0"
							 VerticalContentAlignment="Center"
							 LostFocus="RunEveryMinutes_OnLostFocus"
							 Padding="3 0"
							 MaxLength="9"
							 PreviewTextInput="RunEveryMinutes_OnPreviewTextInput"
							 PreviewKeyDown="UIElement_OnPreviewKeyDown"
							 IsEnabled="{Binding CanInheritFrom,Converter={StaticResource InvertBoolConverter}}">
					</TextBox>
					<TextBlock Text="minutes" Foreground="#525963"></TextBlock>
				</StackPanel>
				<!--Row 5-->
				<CheckBox Content="Run once" Grid.Row="4" HorizontalAlignment="Left" IsChecked="{Binding CanRunOnce}"
						  Command="{Binding SaveCommand}"
						  Foreground="#525963"
						  IsEnabled="{Binding CanInheritFrom,Converter={StaticResource InvertBoolConverter}}"></CheckBox>
				<!--Column 2: Pie Chart-->
				<local:PieChartControl Grid.Column="1" Grid.RowSpan="5" DataContext="{Binding PieChartViewModel}"/>
			</Grid>
		</Grid>
	</Expander>
</UserControl>
